
RTOS_Tasks_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dcc  08003dcc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003dcc  08003dcc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dcc  08003dcc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000174bc  20000018  08003dec  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200174d4  08003dec  000274d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d40a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac8  00000000  00000000  0002d452  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002ef20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f8  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012d18  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094c0  00000000  00000000  00043100  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000719cc  00000000  00000000  0004c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdf8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e3c  00000000  00000000  000be008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c3c 	.word	0x08003c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08003c3c 	.word	0x08003c3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <main>:

char usr_msg[250] = { 0 };
uint32_t notification_value = 0;

int main(void)
{
 80001e0:	b5b0      	push	{r4, r5, r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af02      	add	r7, sp, #8
	DWT->CTRL |= (1 << 0);
 80001e6:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <main+0x78>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a1b      	ldr	r2, [pc, #108]	; (8000258 <main+0x78>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6013      	str	r3, [r2, #0]

	RCC_DeInit();
 80001f2:	f000 fb3d 	bl	8000870 <RCC_DeInit>

	SystemCoreClockUpdate();
 80001f6:	f000 f995 	bl	8000524 <SystemCoreClockUpdate>

	prvSetupHardware();
 80001fa:	f000 f8a3 	bl	8000344 <prvSetupHardware>

	sprintf(usr_msg, "This is Task Delete Demo\r\n");
 80001fe:	4a17      	ldr	r2, [pc, #92]	; (800025c <main+0x7c>)
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <main+0x80>)
 8000202:	4614      	mov	r4, r2
 8000204:	461d      	mov	r5, r3
 8000206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800020a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800020e:	c403      	stmia	r4!, {r0, r1}
 8000210:	8022      	strh	r2, [r4, #0]
 8000212:	3402      	adds	r4, #2
 8000214:	0c13      	lsrs	r3, r2, #16
 8000216:	7023      	strb	r3, [r4, #0]
	printmsg(usr_msg);
 8000218:	4810      	ldr	r0, [pc, #64]	; (800025c <main+0x7c>)
 800021a:	f000 f89b 	bl	8000354 <printmsg>

	SEGGER_SYSVIEW_Conf();
 800021e:	f001 ffdd 	bl	80021dc <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000222:	f002 feef 	bl	8003004 <SEGGER_SYSVIEW_Start>

	xTaskCreate(vTask1_Handler, "TASK-1", 500, NULL, 1, &xTaskHandle1);
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <main+0x84>)
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	2301      	movs	r3, #1
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2300      	movs	r3, #0
 8000230:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000234:	490c      	ldr	r1, [pc, #48]	; (8000268 <main+0x88>)
 8000236:	480d      	ldr	r0, [pc, #52]	; (800026c <main+0x8c>)
 8000238:	f000 fdf6 	bl	8000e28 <xTaskCreate>

	xTaskCreate(vTask2_Handler, "TASK-2", 500, NULL, 2, &xTaskHandle2);
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <main+0x90>)
 800023e:	9301      	str	r3, [sp, #4]
 8000240:	2302      	movs	r3, #2
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800024a:	490a      	ldr	r1, [pc, #40]	; (8000274 <main+0x94>)
 800024c:	480a      	ldr	r0, [pc, #40]	; (8000278 <main+0x98>)
 800024e:	f000 fdeb 	bl	8000e28 <xTaskCreate>

	vTaskStartScheduler();
 8000252:	f001 f81d 	bl	8001290 <vTaskStartScheduler>

	for(;;);
 8000256:	e7fe      	b.n	8000256 <main+0x76>
 8000258:	e0001000 	.word	0xe0001000
 800025c:	2000003c 	.word	0x2000003c
 8000260:	08003c54 	.word	0x08003c54
 8000264:	20000034 	.word	0x20000034
 8000268:	08003c70 	.word	0x08003c70
 800026c:	0800027d 	.word	0x0800027d
 8000270:	20000038 	.word	0x20000038
 8000274:	08003c78 	.word	0x08003c78
 8000278:	080002c5 	.word	0x080002c5

0800027c <vTask1_Handler>:

}

void vTask1_Handler(void *params)
{
 800027c:	b5b0      	push	{r4, r5, r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	TickType_t current_tick = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]

	sprintf(usr_msg, "Task - 1 is running\r\n");
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <vTask1_Handler+0x3c>)
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <vTask1_Handler+0x40>)
 800028c:	4614      	mov	r4, r2
 800028e:	461d      	mov	r5, r3
 8000290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000294:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000298:	6020      	str	r0, [r4, #0]
 800029a:	3404      	adds	r4, #4
 800029c:	8021      	strh	r1, [r4, #0]
	printmsg(usr_msg);
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <vTask1_Handler+0x3c>)
 80002a0:	f000 f858 	bl	8000354 <printmsg>

	while(1)
	{
		//rtos_delay(200);
		vTaskDelay(200);
 80002a4:	20c8      	movs	r0, #200	; 0xc8
 80002a6:	f000 ffbb 	bl	8001220 <vTaskDelay>
		GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 80002aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <vTask1_Handler+0x44>)
 80002b0:	f000 fa83 	bl	80007ba <GPIO_ToggleBits>
		vTaskDelay(200);
 80002b4:	e7f6      	b.n	80002a4 <vTask1_Handler+0x28>
 80002b6:	bf00      	nop
 80002b8:	2000003c 	.word	0x2000003c
 80002bc:	08003c80 	.word	0x08003c80
 80002c0:	40020c00 	.word	0x40020c00

080002c4 <vTask2_Handler>:
	}
}

void vTask2_Handler(void *params)
{
 80002c4:	b5b0      	push	{r4, r5, r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	TickType_t current_tick = 0;
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]

	sprintf(usr_msg, "Task - 2 is running\r\n");
 80002d0:	4a17      	ldr	r2, [pc, #92]	; (8000330 <vTask2_Handler+0x6c>)
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <vTask2_Handler+0x70>)
 80002d4:	4614      	mov	r4, r2
 80002d6:	461d      	mov	r5, r3
 80002d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80002e0:	6020      	str	r0, [r4, #0]
 80002e2:	3404      	adds	r4, #4
 80002e4:	8021      	strh	r1, [r4, #0]
	printmsg(usr_msg);
 80002e6:	4812      	ldr	r0, [pc, #72]	; (8000330 <vTask2_Handler+0x6c>)
 80002e8:	f000 f834 	bl	8000354 <printmsg>

	while(1)
	{
		if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 80002ec:	2101      	movs	r1, #1
 80002ee:	4812      	ldr	r0, [pc, #72]	; (8000338 <vTask2_Handler+0x74>)
 80002f0:	f000 fa49 	bl	8000786 <GPIO_ReadInputDataBit>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d109      	bne.n	800030e <vTask2_Handler+0x4a>
		{
			rtos_delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 f8db 	bl	80004b8 <rtos_delay>
			GPIO_ToggleBits(GPIOD, GPIO_Pin_15);
 8000302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000306:	480d      	ldr	r0, [pc, #52]	; (800033c <vTask2_Handler+0x78>)
 8000308:	f000 fa57 	bl	80007ba <GPIO_ToggleBits>
 800030c:	e7ee      	b.n	80002ec <vTask2_Handler+0x28>
		}
		else
		{
			sprintf(usr_msg, "Task - 2 is getting deleted\r\n");
 800030e:	4a08      	ldr	r2, [pc, #32]	; (8000330 <vTask2_Handler+0x6c>)
 8000310:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <vTask2_Handler+0x7c>)
 8000312:	4614      	mov	r4, r2
 8000314:	461d      	mov	r5, r3
 8000316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800031a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800031e:	c407      	stmia	r4!, {r0, r1, r2}
 8000320:	8023      	strh	r3, [r4, #0]
			printmsg(usr_msg);
 8000322:	4803      	ldr	r0, [pc, #12]	; (8000330 <vTask2_Handler+0x6c>)
 8000324:	f000 f816 	bl	8000354 <printmsg>
			vTaskDelete(NULL);
 8000328:	2000      	movs	r0, #0
 800032a:	f000 fedd 	bl	80010e8 <vTaskDelete>
		if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 800032e:	e7dd      	b.n	80002ec <vTask2_Handler+0x28>
 8000330:	2000003c 	.word	0x2000003c
 8000334:	08003c98 	.word	0x08003c98
 8000338:	40020000 	.word	0x40020000
 800033c:	40020c00 	.word	0x40020c00
 8000340:	08003cb0 	.word	0x08003cb0

08000344 <prvSetupHardware>:
		}
	}
}

static void prvSetupHardware(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	prvSetupGPIO();
 8000348:	f000 f882 	bl	8000450 <prvSetupGPIO>
	prvSetupUart();
 800034c:	f000 f832 	bl	80003b4 <prvSetupUart>
}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}

08000354 <printmsg>:

void printmsg(char *msg)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++)
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	e013      	b.n	800038a <printmsg+0x36>
	{
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);
 8000362:	bf00      	nop
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <printmsg+0x5c>)
 8000368:	f000 fc8e 	bl	8000c88 <USART_GetFlagStatus>
 800036c:	4603      	mov	r3, r0
 800036e:	2b01      	cmp	r3, #1
 8000370:	d1f8      	bne.n	8000364 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	4413      	add	r3, r2
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	b29b      	uxth	r3, r3
 800037c:	4619      	mov	r1, r3
 800037e:	480c      	ldr	r0, [pc, #48]	; (80003b0 <printmsg+0x5c>)
 8000380:	f000 fc70 	bl	8000c64 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++)
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3301      	adds	r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	f7ff ff20 	bl	80001d0 <strlen>
 8000390:	4602      	mov	r2, r0
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	4293      	cmp	r3, r2
 8000396:	d3e4      	bcc.n	8000362 <printmsg+0xe>
	}

	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) != SET);
 8000398:	bf00      	nop
 800039a:	2140      	movs	r1, #64	; 0x40
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <printmsg+0x5c>)
 800039e:	f000 fc73 	bl	8000c88 <USART_GetFlagStatus>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b01      	cmp	r3, #1
 80003a6:	d1f8      	bne.n	800039a <printmsg+0x46>
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40004400 	.word	0x40004400

080003b4 <prvSetupUart>:

static void prvSetupUart(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_UART_Pin;
	USART_InitTypeDef UART2_Init;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80003ba:	2101      	movs	r1, #1
 80003bc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80003c0:	f000 fb56 	bl	8000a70 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80003c4:	2101      	movs	r1, #1
 80003c6:	2001      	movs	r0, #1
 80003c8:	f000 fb32 	bl	8000a30 <RCC_AHB1PeriphClockCmd>

	memset(&GPIO_UART_Pin, 0, sizeof(GPIO_UART_Pin));
 80003cc:	f107 0310 	add.w	r3, r7, #16
 80003d0:	2208      	movs	r2, #8
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f003 fc29 	bl	8003c2c <memset>

	GPIO_UART_Pin.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80003da:	230c      	movs	r3, #12
 80003dc:	613b      	str	r3, [r7, #16]
	GPIO_UART_Pin.GPIO_Mode = GPIO_Mode_AF;
 80003de:	2302      	movs	r3, #2
 80003e0:	753b      	strb	r3, [r7, #20]
	GPIO_UART_Pin.GPIO_PuPd = GPIO_PuPd_UP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_UART_Pin);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4816      	ldr	r0, [pc, #88]	; (8000448 <prvSetupUart+0x94>)
 80003ee:	f000 f93c 	bl	800066a <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 80003f2:	2207      	movs	r2, #7
 80003f4:	2102      	movs	r1, #2
 80003f6:	4814      	ldr	r0, [pc, #80]	; (8000448 <prvSetupUart+0x94>)
 80003f8:	f000 f9f1 	bl	80007de <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 80003fc:	2207      	movs	r2, #7
 80003fe:	2103      	movs	r1, #3
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <prvSetupUart+0x94>)
 8000402:	f000 f9ec 	bl	80007de <GPIO_PinAFConfig>

	memset(&UART2_Init, 0, sizeof(UART2_Init));
 8000406:	463b      	mov	r3, r7
 8000408:	2210      	movs	r2, #16
 800040a:	2100      	movs	r1, #0
 800040c:	4618      	mov	r0, r3
 800040e:	f003 fc0d 	bl	8003c2c <memset>

	UART2_Init.USART_BaudRate = 115200;
 8000412:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000416:	603b      	str	r3, [r7, #0]
	UART2_Init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000418:	2300      	movs	r3, #0
 800041a:	81bb      	strh	r3, [r7, #12]
	UART2_Init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 800041c:	230c      	movs	r3, #12
 800041e:	817b      	strh	r3, [r7, #10]
	UART2_Init.USART_Parity = USART_Parity_No;
 8000420:	2300      	movs	r3, #0
 8000422:	813b      	strh	r3, [r7, #8]
	UART2_Init.USART_StopBits = USART_StopBits_1;
 8000424:	2300      	movs	r3, #0
 8000426:	80fb      	strh	r3, [r7, #6]
	UART2_Init.USART_WordLength = USART_WordLength_8b;
 8000428:	2300      	movs	r3, #0
 800042a:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART2, &UART2_Init);
 800042c:	463b      	mov	r3, r7
 800042e:	4619      	mov	r1, r3
 8000430:	4806      	ldr	r0, [pc, #24]	; (800044c <prvSetupUart+0x98>)
 8000432:	f000 fb3d 	bl	8000ab0 <USART_Init>

	USART_Cmd(USART2, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	4804      	ldr	r0, [pc, #16]	; (800044c <prvSetupUart+0x98>)
 800043a:	f000 fbf3 	bl	8000c24 <USART_Cmd>
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40020000 	.word	0x40020000
 800044c:	40004400 	.word	0x40004400

08000450 <prvSetupGPIO>:

void prvSetupGPIO(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000456:	2101      	movs	r1, #1
 8000458:	2008      	movs	r0, #8
 800045a:	f000 fae9 	bl	8000a30 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800045e:	2101      	movs	r1, #1
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fae5 	bl	8000a30 <RCC_AHB1PeriphClockCmd>
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	GPIO_InitTypeDef LedInit, ButtonInit;
	LedInit.GPIO_Mode = GPIO_Mode_OUT;
 8000466:	2301      	movs	r3, #1
 8000468:	733b      	strb	r3, [r7, #12]
	LedInit.GPIO_OType = GPIO_OType_PP;
 800046a:	2300      	movs	r3, #0
 800046c:	73bb      	strb	r3, [r7, #14]
	LedInit.GPIO_Pin = GPIO_Pin_15;
 800046e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000472:	60bb      	str	r3, [r7, #8]
	LedInit.GPIO_Speed = GPIO_Low_Speed;
 8000474:	2300      	movs	r3, #0
 8000476:	737b      	strb	r3, [r7, #13]
	LedInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOD, &LedInit);
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	4619      	mov	r1, r3
 8000482:	480b      	ldr	r0, [pc, #44]	; (80004b0 <prvSetupGPIO+0x60>)
 8000484:	f000 f8f1 	bl	800066a <GPIO_Init>

	ButtonInit.GPIO_Mode = GPIO_Mode_IN;
 8000488:	2300      	movs	r3, #0
 800048a:	713b      	strb	r3, [r7, #4]
	ButtonInit.GPIO_OType = GPIO_OType_PP;
 800048c:	2300      	movs	r3, #0
 800048e:	71bb      	strb	r3, [r7, #6]
	ButtonInit.GPIO_Pin = GPIO_Pin_0;
 8000490:	2301      	movs	r3, #1
 8000492:	603b      	str	r3, [r7, #0]
	ButtonInit.GPIO_Speed = GPIO_Low_Speed;
 8000494:	2300      	movs	r3, #0
 8000496:	717b      	strb	r3, [r7, #5]
	ButtonInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &ButtonInit);
 800049c:	463b      	mov	r3, r7
 800049e:	4619      	mov	r1, r3
 80004a0:	4804      	ldr	r0, [pc, #16]	; (80004b4 <prvSetupGPIO+0x64>)
 80004a2:	f000 f8e2 	bl	800066a <GPIO_Init>
//
//	EXTI_Init(&ExtiInit);
//
//	NVIC_SetPriority(EXTI0_IRQn, 5);
//	NVIC_EnableIRQ(EXTI0_IRQn);
}
 80004a6:	bf00      	nop
 80004a8:	3710      	adds	r7, #16
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40020c00 	.word	0x40020c00
 80004b4:	40020000 	.word	0x40020000

080004b8 <rtos_delay>:

void rtos_delay(uint32_t delay_in_ms)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint32_t current_tick_count = xTaskGetTickCount();
 80004c0:	f000 ffea 	bl	8001498 <xTaskGetTickCount>
 80004c4:	60f8      	str	r0, [r7, #12]

	//xTicksToWait = (xTimeInMs * configTICK_RATE_HZ)/1000
	uint32_t delay_in_ticks = (delay_in_ms * configTICK_RATE_HZ) / 1000;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004cc:	fb02 f303 	mul.w	r3, r2, r3
 80004d0:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <rtos_delay+0x3c>)
 80004d2:	fba2 2303 	umull	r2, r3, r2, r3
 80004d6:	099b      	lsrs	r3, r3, #6
 80004d8:	60bb      	str	r3, [r7, #8]

	while(xTaskGetTickCount() < (current_tick_count + delay_in_ticks));
 80004da:	bf00      	nop
 80004dc:	f000 ffdc 	bl	8001498 <xTaskGetTickCount>
 80004e0:	4601      	mov	r1, r0
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	4413      	add	r3, r2
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d3f7      	bcc.n	80004dc <rtos_delay+0x24>
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	10624dd3 	.word	0x10624dd3

080004f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <SystemInit+0x28>)
 80004fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <SystemInit+0x28>)
 8000504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <SystemInit+0x28>)
 800050e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000512:	609a      	str	r2, [r3, #8]
#endif
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b087      	sub	sp, #28
 8000528:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800052a:	2300      	movs	r3, #0
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
 8000532:	2302      	movs	r3, #2
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	2302      	movs	r3, #2
 800053c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800053e:	4b31      	ldr	r3, [pc, #196]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f003 030c 	and.w	r3, r3, #12
 8000546:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	2b04      	cmp	r3, #4
 800054c:	d007      	beq.n	800055e <SystemCoreClockUpdate+0x3a>
 800054e:	2b08      	cmp	r3, #8
 8000550:	d009      	beq.n	8000566 <SystemCoreClockUpdate+0x42>
 8000552:	2b00      	cmp	r3, #0
 8000554:	d13d      	bne.n	80005d2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000556:	4b2c      	ldr	r3, [pc, #176]	; (8000608 <SystemCoreClockUpdate+0xe4>)
 8000558:	4a2c      	ldr	r2, [pc, #176]	; (800060c <SystemCoreClockUpdate+0xe8>)
 800055a:	601a      	str	r2, [r3, #0]
      break;
 800055c:	e03d      	b.n	80005da <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800055e:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <SystemCoreClockUpdate+0xe4>)
 8000560:	4a2b      	ldr	r2, [pc, #172]	; (8000610 <SystemCoreClockUpdate+0xec>)
 8000562:	601a      	str	r2, [r3, #0]
      break;
 8000564:	e039      	b.n	80005da <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	0d9b      	lsrs	r3, r3, #22
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800057a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d00c      	beq.n	800059c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000582:	4a23      	ldr	r2, [pc, #140]	; (8000610 <SystemCoreClockUpdate+0xec>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	fbb2 f3f3 	udiv	r3, r2, r3
 800058a:	4a1e      	ldr	r2, [pc, #120]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 800058c:	6852      	ldr	r2, [r2, #4]
 800058e:	0992      	lsrs	r2, r2, #6
 8000590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000594:	fb02 f303 	mul.w	r3, r2, r3
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e00b      	b.n	80005b4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <SystemCoreClockUpdate+0xe8>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a4:	4a17      	ldr	r2, [pc, #92]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 80005a6:	6852      	ldr	r2, [r2, #4]
 80005a8:	0992      	lsrs	r2, r2, #6
 80005aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	f003 0303 	and.w	r3, r3, #3
 80005be:	3301      	adds	r3, #1
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <SystemCoreClockUpdate+0xe4>)
 80005ce:	6013      	str	r3, [r2, #0]
      break;
 80005d0:	e003      	b.n	80005da <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <SystemCoreClockUpdate+0xe4>)
 80005d4:	4a0d      	ldr	r2, [pc, #52]	; (800060c <SystemCoreClockUpdate+0xe8>)
 80005d6:	601a      	str	r2, [r3, #0]
      break;
 80005d8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <SystemCoreClockUpdate+0xe0>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	091b      	lsrs	r3, r3, #4
 80005e0:	f003 030f 	and.w	r3, r3, #15
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <SystemCoreClockUpdate+0xf0>)
 80005e6:	5cd3      	ldrb	r3, [r2, r3]
 80005e8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80005ea:	4b07      	ldr	r3, [pc, #28]	; (8000608 <SystemCoreClockUpdate+0xe4>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	fa22 f303 	lsr.w	r3, r2, r3
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <SystemCoreClockUpdate+0xe4>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	371c      	adds	r7, #28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	40023800 	.word	0x40023800
 8000608:	20000000 	.word	0x20000000
 800060c:	00f42400 	.word	0x00f42400
 8000610:	017d7840 	.word	0x017d7840
 8000614:	08003da8 	.word	0x08003da8

08000618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000650 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800061c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800061e:	e003      	b.n	8000628 <LoopCopyDataInit>

08000620 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000622:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000624:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000626:	3104      	adds	r1, #4

08000628 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800062c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000630:	d3f6      	bcc.n	8000620 <CopyDataInit>
  ldr  r2, =_sbss
 8000632:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000634:	e002      	b.n	800063c <LoopFillZerobss>

08000636 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000636:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000638:	f842 3b04 	str.w	r3, [r2], #4

0800063c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800063e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000640:	d3f9      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000642:	f7ff ff59 	bl	80004f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000646:	f003 fab3 	bl	8003bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800064a:	f7ff fdc9 	bl	80001e0 <main>
  bx  lr    
 800064e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000650:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000654:	08003dd4 	.word	0x08003dd4
  ldr  r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800065c:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000660:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000664:	200174d4 	.word	0x200174d4

08000668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>

0800066a <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800066a:	b480      	push	{r7}
 800066c:	b087      	sub	sp, #28
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	2300      	movs	r3, #0
 800067e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e076      	b.n	8000774 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000686:	2201      	movs	r2, #1
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	693a      	ldr	r2, [r7, #16]
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d165      	bne.n	800076e <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	2103      	movs	r1, #3
 80006ac:	fa01 f303 	lsl.w	r3, r1, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	401a      	ands	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	431a      	orrs	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d003      	beq.n	80006e0 <GPIO_Init+0x76>
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d12e      	bne.n	800073e <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	689a      	ldr	r2, [r3, #8]
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	401a      	ands	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	795b      	ldrb	r3, [r3, #5]
 80006fe:	4619      	mov	r1, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	431a      	orrs	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	b29b      	uxth	r3, r3
 8000716:	4619      	mov	r1, r3
 8000718:	2301      	movs	r3, #1
 800071a:	408b      	lsls	r3, r1
 800071c:	43db      	mvns	r3, r3
 800071e:	401a      	ands	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	7992      	ldrb	r2, [r2, #6]
 800072c:	4611      	mov	r1, r2
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	b292      	uxth	r2, r2
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	b292      	uxth	r2, r2
 8000738:	431a      	orrs	r2, r3
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	68da      	ldr	r2, [r3, #12]
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	b29b      	uxth	r3, r3
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	2103      	movs	r1, #3
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43db      	mvns	r3, r3
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	79db      	ldrb	r3, [r3, #7]
 800075e:	4619      	mov	r1, r3
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	fa01 f303 	lsl.w	r3, r1, r3
 8000768:	431a      	orrs	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	3301      	adds	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	2b0f      	cmp	r3, #15
 8000778:	d985      	bls.n	8000686 <GPIO_Init+0x1c>
    }
  }
}
 800077a:	bf00      	nop
 800077c:	371c      	adds	r7, #28
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000786:	b480      	push	{r7}
 8000788:	b085      	sub	sp, #20
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
 800078e:	460b      	mov	r3, r1
 8000790:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	691a      	ldr	r2, [r3, #16]
 800079a:	887b      	ldrh	r3, [r7, #2]
 800079c:	4013      	ands	r3, r2
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d002      	beq.n	80007a8 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80007a2:	2301      	movs	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	e001      	b.n	80007ac <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3714      	adds	r7, #20
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	887b      	ldrh	r3, [r7, #2]
 80007cc:	405a      	eors	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	615a      	str	r2, [r3, #20]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007de:	b480      	push	{r7}
 80007e0:	b085      	sub	sp, #20
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	460b      	mov	r3, r1
 80007e8:	807b      	strh	r3, [r7, #2]
 80007ea:	4613      	mov	r3, r2
 80007ec:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007f6:	787a      	ldrb	r2, [r7, #1]
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000806:	887b      	ldrh	r3, [r7, #2]
 8000808:	08db      	lsrs	r3, r3, #3
 800080a:	b29b      	uxth	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3208      	adds	r2, #8
 8000812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	f003 0307 	and.w	r3, r3, #7
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	210f      	movs	r1, #15
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	8879      	ldrh	r1, [r7, #2]
 8000828:	08c9      	lsrs	r1, r1, #3
 800082a:	b289      	uxth	r1, r1
 800082c:	4608      	mov	r0, r1
 800082e:	ea02 0103 	and.w	r1, r2, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	f100 0208 	add.w	r2, r0, #8
 8000838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	b29b      	uxth	r3, r3
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3208      	adds	r2, #8
 8000848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	4313      	orrs	r3, r2
 8000850:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000852:	887b      	ldrh	r3, [r7, #2]
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	b29b      	uxth	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3208      	adds	r2, #8
 800085e:	68b9      	ldr	r1, [r7, #8]
 8000860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000874:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <RCC_DeInit+0x60>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <RCC_DeInit+0x60>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <RCC_DeInit+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <RCC_DeInit+0x60>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <RCC_DeInit+0x60>)
 800088c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000890:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000894:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <RCC_DeInit+0x60>)
 8000898:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <RCC_DeInit+0x64>)
 800089a:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <RCC_DeInit+0x60>)
 800089e:	4a0e      	ldr	r2, [pc, #56]	; (80008d8 <RCC_DeInit+0x68>)
 80008a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <RCC_DeInit+0x60>)
 80008a6:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <RCC_DeInit+0x6c>)
 80008a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <RCC_DeInit+0x60>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <RCC_DeInit+0x60>)
 80008b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <RCC_DeInit+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <RCC_DeInit+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	40023800 	.word	0x40023800
 80008d4:	24003010 	.word	0x24003010
 80008d8:	20003000 	.word	0x20003000
 80008dc:	24003000 	.word	0x24003000

080008e0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000900:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 030c 	and.w	r3, r3, #12
 8000908:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	2b04      	cmp	r3, #4
 800090e:	d007      	beq.n	8000920 <RCC_GetClocksFreq+0x40>
 8000910:	2b08      	cmp	r3, #8
 8000912:	d009      	beq.n	8000928 <RCC_GetClocksFreq+0x48>
 8000914:	2b00      	cmp	r3, #0
 8000916:	d13d      	bne.n	8000994 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a42      	ldr	r2, [pc, #264]	; (8000a24 <RCC_GetClocksFreq+0x144>)
 800091c:	601a      	str	r2, [r3, #0]
    break;
 800091e:	e03d      	b.n	800099c <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a41      	ldr	r2, [pc, #260]	; (8000a28 <RCC_GetClocksFreq+0x148>)
 8000924:	601a      	str	r2, [r3, #0]
    break;
 8000926:	e039      	b.n	800099c <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	0d9b      	lsrs	r3, r3, #22
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800093c:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d00c      	beq.n	800095e <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000944:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <RCC_GetClocksFreq+0x148>)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	fbb2 f3f3 	udiv	r3, r2, r3
 800094c:	4a34      	ldr	r2, [pc, #208]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 800094e:	6852      	ldr	r2, [r2, #4]
 8000950:	0992      	lsrs	r2, r2, #6
 8000952:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000956:	fb02 f303 	mul.w	r3, r2, r3
 800095a:	61fb      	str	r3, [r7, #28]
 800095c:	e00b      	b.n	8000976 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800095e:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <RCC_GetClocksFreq+0x144>)
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4a2e      	ldr	r2, [pc, #184]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 8000968:	6852      	ldr	r2, [r2, #4]
 800096a:	0992      	lsrs	r2, r2, #6
 800096c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000976:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	0c1b      	lsrs	r3, r3, #16
 800097c:	f003 0303 	and.w	r3, r3, #3
 8000980:	3301      	adds	r3, #1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	fbb2 f2f3 	udiv	r2, r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	601a      	str	r2, [r3, #0]
    break;
 8000992:	e003      	b.n	800099c <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <RCC_GetClocksFreq+0x144>)
 8000998:	601a      	str	r2, [r3, #0]
    break;
 800099a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009a4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	091b      	lsrs	r3, r3, #4
 80009aa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009ac:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <RCC_GetClocksFreq+0x14c>)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	40da      	lsrs	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80009cc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	0a9b      	lsrs	r3, r3, #10
 80009d2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <RCC_GetClocksFreq+0x14c>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	40da      	lsrs	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <RCC_GetClocksFreq+0x140>)
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80009f4:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	0b5b      	lsrs	r3, r3, #13
 80009fa:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <RCC_GetClocksFreq+0x14c>)
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685a      	ldr	r2, [r3, #4]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	40da      	lsrs	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	60da      	str	r2, [r3, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3724      	adds	r7, #36	; 0x24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40023800 	.word	0x40023800
 8000a24:	00f42400 	.word	0x00f42400
 8000a28:	017d7840 	.word	0x017d7840
 8000a2c:	20000004 	.word	0x20000004

08000a30 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a3c:	78fb      	ldrb	r3, [r7, #3]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d006      	beq.n	8000a50 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a46:	4909      	ldr	r1, [pc, #36]	; (8000a6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a4e:	e006      	b.n	8000a5e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	43db      	mvns	r3, r3
 8000a58:	4904      	ldr	r1, [pc, #16]	; (8000a6c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d006      	beq.n	8000a90 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <RCC_APB1PeriphClockCmd+0x3c>)
 8000a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a86:	4909      	ldr	r1, [pc, #36]	; (8000aac <RCC_APB1PeriphClockCmd+0x3c>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000a8e:	e006      	b.n	8000a9e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <RCC_APB1PeriphClockCmd+0x3c>)
 8000a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	4904      	ldr	r1, [pc, #16]	; (8000aac <RCC_APB1PeriphClockCmd+0x3c>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	8a1b      	ldrh	r3, [r3, #16]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	88db      	ldrh	r3, [r3, #6]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	899b      	ldrh	r3, [r3, #12]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000afc:	f023 030c 	bic.w	r3, r3, #12
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	889a      	ldrh	r2, [r3, #4]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	891b      	ldrh	r3, [r3, #8]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	b29a      	uxth	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	8a9b      	ldrh	r3, [r3, #20]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	899b      	ldrh	r3, [r3, #12]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000b4a:	f107 0308 	add.w	r3, r7, #8
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fec6 	bl	80008e0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a30      	ldr	r2, [pc, #192]	; (8000c18 <USART_Init+0x168>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d003      	beq.n	8000b64 <USART_Init+0xb4>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <USART_Init+0x16c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d102      	bne.n	8000b6a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	e001      	b.n	8000b6e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	899b      	ldrh	r3, [r3, #12]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da0c      	bge.n	8000b94 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000b7a:	6a3a      	ldr	r2, [r7, #32]
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	4413      	add	r3, r2
 8000b82:	009a      	lsls	r2, r3, #2
 8000b84:	441a      	add	r2, r3
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b90:	61fb      	str	r3, [r7, #28]
 8000b92:	e00b      	b.n	8000bac <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009a      	lsls	r2, r3, #2
 8000b9e:	441a      	add	r2, r3
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <USART_Init+0x170>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	095b      	lsrs	r3, r3, #5
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	2264      	movs	r2, #100	; 0x64
 8000bc0:	fb02 f303 	mul.w	r3, r2, r3
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	899b      	ldrh	r3, [r3, #12]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	b21b      	sxth	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da0c      	bge.n	8000bf0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	3332      	adds	r3, #50	; 0x32
 8000bdc:	4a10      	ldr	r2, [pc, #64]	; (8000c20 <USART_Init+0x170>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bea:	4313      	orrs	r3, r2
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
 8000bee:	e00b      	b.n	8000c08 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	011b      	lsls	r3, r3, #4
 8000bf4:	3332      	adds	r3, #50	; 0x32
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <USART_Init+0x170>)
 8000bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfc:	095b      	lsrs	r3, r3, #5
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c04:	4313      	orrs	r3, r2
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	811a      	strh	r2, [r3, #8]
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	; 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40011000 	.word	0x40011000
 8000c1c:	40011400 	.word	0x40011400
 8000c20:	51eb851f 	.word	0x51eb851f

08000c24 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c30:	78fb      	ldrb	r3, [r7, #3]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d008      	beq.n	8000c48 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	899b      	ldrh	r3, [r3, #12]
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000c46:	e007      	b.n	8000c58 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	899b      	ldrh	r3, [r3, #12]
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	819a      	strh	r2, [r3, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	809a      	strh	r2, [r3, #4]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d002      	beq.n	8000cae <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e001      	b.n	8000cb2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f103 0208 	add.w	r2, r3, #8
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f103 0208 	add.w	r2, r3, #8
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f103 0208 	add.w	r2, r3, #8
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b085      	sub	sp, #20
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d78:	d103      	bne.n	8000d82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e00c      	b.n	8000d9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3308      	adds	r3, #8
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	e002      	b.n	8000d90 <vListInsert+0x2e>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d2f6      	bcs.n	8000d8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6892      	ldr	r2, [r2, #8]
 8000dea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	6852      	ldr	r2, [r2, #4]
 8000df4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d103      	bne.n	8000e08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	1e5a      	subs	r2, r3, #1
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af04      	add	r7, sp, #16
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	603b      	str	r3, [r7, #0]
 8000e34:	4613      	mov	r3, r2
 8000e36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 ffe9 	bl	8001e14 <pvPortMalloc>
 8000e42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00e      	beq.n	8000e68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000e4a:	2058      	movs	r0, #88	; 0x58
 8000e4c:	f000 ffe2 	bl	8001e14 <pvPortMalloc>
 8000e50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e5e:	e005      	b.n	8000e6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000e60:	6978      	ldr	r0, [r7, #20]
 8000e62:	f001 f899 	bl	8001f98 <vPortFree>
 8000e66:	e001      	b.n	8000e6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d013      	beq.n	8000e9a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	2300      	movs	r3, #0
 8000e76:	9303      	str	r3, [sp, #12]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	9302      	str	r3, [sp, #8]
 8000e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68b9      	ldr	r1, [r7, #8]
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f000 f80e 	bl	8000eaa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000e8e:	69f8      	ldr	r0, [r7, #28]
 8000e90:	f000 f89e 	bl	8000fd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	e002      	b.n	8000ea0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000ea0:	69bb      	ldr	r3, [r7, #24]
	}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3720      	adds	r7, #32
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b088      	sub	sp, #32
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	60f8      	str	r0, [r7, #12]
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec2:	f383 8811 	msr	BASEPRI, r3
 8000ec6:	f3bf 8f6f 	isb	sy
 8000eca:	f3bf 8f4f 	dsb	sy
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e7fe      	b.n	8000ed0 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	461a      	mov	r2, r3
 8000edc:	21a5      	movs	r1, #165	; 0xa5
 8000ede:	f002 fea5 	bl	8003c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000eec:	3b01      	subs	r3, #1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	f023 0307 	bic.w	r3, r3, #7
 8000efa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d009      	beq.n	8000f1a <prvInitialiseNewTask+0x70>
 8000f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f0a:	f383 8811 	msr	BASEPRI, r3
 8000f0e:	f3bf 8f6f 	isb	sy
 8000f12:	f3bf 8f4f 	dsb	sy
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	e7fe      	b.n	8000f18 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e012      	b.n	8000f46 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	4413      	add	r3, r2
 8000f26:	7819      	ldrb	r1, [r3, #0]
 8000f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	3334      	adds	r3, #52	; 0x34
 8000f30:	460a      	mov	r2, r1
 8000f32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	3301      	adds	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	2b09      	cmp	r3, #9
 8000f4a:	d9e9      	bls.n	8000f20 <prvInitialiseNewTask+0x76>
 8000f4c:	e000      	b.n	8000f50 <prvInitialiseNewTask+0xa6>
		{
			break;
 8000f4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d901      	bls.n	8000f62 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f6c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f70:	2200      	movs	r2, #0
 8000f72:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	3304      	adds	r3, #4
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fec1 	bl	8000d00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f80:	3318      	adds	r3, #24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff febc 	bl	8000d00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f90:	f1c3 0205 	rsb	r2, r3, #5
 8000f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	69b8      	ldr	r0, [r7, #24]
 8000fb2:	f000 fce3 	bl	800197c <pxPortInitialiseStack>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000fd8:	f000 fdf8 	bl	8001bcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <prvAddNewTaskToReadyList+0xfc>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a3a      	ldr	r2, [pc, #232]	; (80010cc <prvAddNewTaskToReadyList+0xfc>)
 8000fe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	; (80010d0 <prvAddNewTaskToReadyList+0x100>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000fee:	4a38      	ldr	r2, [pc, #224]	; (80010d0 <prvAddNewTaskToReadyList+0x100>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000ff4:	4b35      	ldr	r3, [pc, #212]	; (80010cc <prvAddNewTaskToReadyList+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d110      	bne.n	800101e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ffc:	f000 fbaa 	bl	8001754 <prvInitialiseTaskLists>
 8001000:	e00d      	b.n	800101e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001002:	4b34      	ldr	r3, [pc, #208]	; (80010d4 <prvAddNewTaskToReadyList+0x104>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d109      	bne.n	800101e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800100a:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <prvAddNewTaskToReadyList+0x100>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	429a      	cmp	r2, r3
 8001016:	d802      	bhi.n	800101e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001018:	4a2d      	ldr	r2, [pc, #180]	; (80010d0 <prvAddNewTaskToReadyList+0x100>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <prvAddNewTaskToReadyList+0x108>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a2c      	ldr	r2, [pc, #176]	; (80010d8 <prvAddNewTaskToReadyList+0x108>)
 8001026:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <prvAddNewTaskToReadyList+0x108>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d016      	beq.n	8001064 <prvAddNewTaskToReadyList+0x94>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fb43 	bl	80036c4 <SEGGER_SYSVIEW_OnTaskCreate>
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	461d      	mov	r5, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	461c      	mov	r4, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	1ae3      	subs	r3, r4, r3
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	462b      	mov	r3, r5
 8001060:	f001 f956 	bl	8002310 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f002 fbb4 	bl	80037d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2201      	movs	r2, #1
 8001072:	409a      	lsls	r2, r3
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <prvAddNewTaskToReadyList+0x10c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	4a18      	ldr	r2, [pc, #96]	; (80010dc <prvAddNewTaskToReadyList+0x10c>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001082:	4613      	mov	r3, r2
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <prvAddNewTaskToReadyList+0x110>)
 800108c:	441a      	add	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	4619      	mov	r1, r3
 8001094:	4610      	mov	r0, r2
 8001096:	f7ff fe40 	bl	8000d1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800109a:	f000 fdc5 	bl	8001c28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <prvAddNewTaskToReadyList+0x104>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d00e      	beq.n	80010c4 <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <prvAddNewTaskToReadyList+0x100>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d207      	bcs.n	80010c4 <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <prvAddNewTaskToReadyList+0x114>)
 80010b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	f3bf 8f4f 	dsb	sy
 80010c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	20000210 	.word	0x20000210
 80010d0:	20000138 	.word	0x20000138
 80010d4:	2000021c 	.word	0x2000021c
 80010d8:	2000022c 	.word	0x2000022c
 80010dc:	20000218 	.word	0x20000218
 80010e0:	2000013c 	.word	0x2000013c
 80010e4:	e000ed04 	.word	0xe000ed04

080010e8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80010f0:	f000 fd6c 	bl	8001bcc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d102      	bne.n	8001100 <vTaskDelete+0x18>
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <vTaskDelete+0x110>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	e000      	b.n	8001102 <vTaskDelete+0x1a>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3304      	adds	r3, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe63 	bl	8000dd4 <uxListRemove>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d115      	bne.n	8001140 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001118:	4938      	ldr	r1, [pc, #224]	; (80011fc <vTaskDelete+0x114>)
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10a      	bne.n	8001140 <vTaskDelete+0x58>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112e:	2201      	movs	r2, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43da      	mvns	r2, r3
 8001136:	4b32      	ldr	r3, [pc, #200]	; (8001200 <vTaskDelete+0x118>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4013      	ands	r3, r2
 800113c:	4a30      	ldr	r2, [pc, #192]	; (8001200 <vTaskDelete+0x118>)
 800113e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	2b00      	cmp	r3, #0
 8001146:	d004      	beq.n	8001152 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3318      	adds	r3, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe41 	bl	8000dd4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <vTaskDelete+0x11c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	4a2a      	ldr	r2, [pc, #168]	; (8001204 <vTaskDelete+0x11c>)
 800115a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800115c:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <vTaskDelete+0x110>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	429a      	cmp	r2, r3
 8001164:	d10b      	bne.n	800117e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3304      	adds	r3, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4826      	ldr	r0, [pc, #152]	; (8001208 <vTaskDelete+0x120>)
 800116e:	f7ff fdd4 	bl	8000d1a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <vTaskDelete+0x124>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	3301      	adds	r3, #1
 8001178:	4a24      	ldr	r2, [pc, #144]	; (800120c <vTaskDelete+0x124>)
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e009      	b.n	8001192 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800117e:	4b24      	ldr	r3, [pc, #144]	; (8001210 <vTaskDelete+0x128>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3b01      	subs	r3, #1
 8001184:	4a22      	ldr	r2, [pc, #136]	; (8001210 <vTaskDelete+0x128>)
 8001186:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 fb4f 	bl	800182c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800118e:	f000 fb5d 	bl	800184c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4618      	mov	r0, r3
 8001196:	f002 fbc1 	bl	800391c <SEGGER_SYSVIEW_ShrinkId>
 800119a:	4603      	mov	r3, r0
 800119c:	4619      	mov	r1, r3
 800119e:	2022      	movs	r0, #34	; 0x22
 80011a0:	f001 fe9a 	bl	8002ed8 <SEGGER_SYSVIEW_RecordU32>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f001 f91a 	bl	80023e0 <SYSVIEW_DeleteTask>
		}
		taskEXIT_CRITICAL();
 80011ac:	f000 fd3c 	bl	8001c28 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <vTaskDelete+0x12c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d01a      	beq.n	80011ee <vTaskDelete+0x106>
		{
			if( pxTCB == pxCurrentTCB )
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <vTaskDelete+0x110>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d115      	bne.n	80011ee <vTaskDelete+0x106>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <vTaskDelete+0x130>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d009      	beq.n	80011de <vTaskDelete+0xf6>
 80011ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ce:	f383 8811 	msr	BASEPRI, r3
 80011d2:	f3bf 8f6f 	isb	sy
 80011d6:	f3bf 8f4f 	dsb	sy
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	e7fe      	b.n	80011dc <vTaskDelete+0xf4>
				portYIELD_WITHIN_API();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <vTaskDelete+0x134>)
 80011e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000138 	.word	0x20000138
 80011fc:	2000013c 	.word	0x2000013c
 8001200:	20000218 	.word	0x20000218
 8001204:	2000022c 	.word	0x2000022c
 8001208:	200001e4 	.word	0x200001e4
 800120c:	200001f8 	.word	0x200001f8
 8001210:	20000210 	.word	0x20000210
 8001214:	2000021c 	.word	0x2000021c
 8001218:	20000238 	.word	0x20000238
 800121c:	e000ed04 	.word	0xe000ed04

08001220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01a      	beq.n	8001268 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <vTaskDelay+0x68>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <vTaskDelay+0x2e>
 800123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800123e:	f383 8811 	msr	BASEPRI, r3
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	f3bf 8f4f 	dsb	sy
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	e7fe      	b.n	800124c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800124e:	f000 f875 	bl	800133c <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	2023      	movs	r0, #35	; 0x23
 8001256:	f001 fe3f 	bl	8002ed8 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800125a:	2100      	movs	r1, #0
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 fb15 	bl	800188c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001262:	f000 f879 	bl	8001358 <xTaskResumeAll>
 8001266:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <vTaskDelay+0x6c>)
 8001270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000238 	.word	0x20000238
 800128c:	e000ed04 	.word	0xe000ed04

08001290 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001296:	4b22      	ldr	r3, [pc, #136]	; (8001320 <vTaskStartScheduler+0x90>)
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	2282      	movs	r2, #130	; 0x82
 80012a2:	4920      	ldr	r1, [pc, #128]	; (8001324 <vTaskStartScheduler+0x94>)
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <vTaskStartScheduler+0x98>)
 80012a6:	f7ff fdbf 	bl	8000e28 <xTaskCreate>
 80012aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d123      	bne.n	80012fa <vTaskStartScheduler+0x6a>
 80012b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b6:	f383 8811 	msr	BASEPRI, r3
 80012ba:	f3bf 8f6f 	isb	sy
 80012be:	f3bf 8f4f 	dsb	sy
 80012c2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <vTaskStartScheduler+0x9c>)
 80012c6:	f04f 32ff 	mov.w	r2, #4294967295
 80012ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <vTaskStartScheduler+0xa0>)
 80012ce:	2201      	movs	r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <vTaskStartScheduler+0xa4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <vTaskStartScheduler+0xa8>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b10      	ldr	r3, [pc, #64]	; (8001320 <vTaskStartScheduler+0x90>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d102      	bne.n	80012ea <vTaskStartScheduler+0x5a>
 80012e4:	f002 f9d2 	bl	800368c <SEGGER_SYSVIEW_OnIdle>
 80012e8:	e004      	b.n	80012f4 <vTaskStartScheduler+0x64>
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <vTaskStartScheduler+0xa8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f002 fa2c 	bl	800374c <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80012f4:	f000 fbcc 	bl	8001a90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80012f8:	e00d      	b.n	8001316 <vTaskStartScheduler+0x86>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d109      	bne.n	8001316 <vTaskStartScheduler+0x86>
 8001302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001306:	f383 8811 	msr	BASEPRI, r3
 800130a:	f3bf 8f6f 	isb	sy
 800130e:	f3bf 8f4f 	dsb	sy
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	e7fe      	b.n	8001314 <vTaskStartScheduler+0x84>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000234 	.word	0x20000234
 8001324:	08003cd0 	.word	0x08003cd0
 8001328:	08001725 	.word	0x08001725
 800132c:	20000230 	.word	0x20000230
 8001330:	2000021c 	.word	0x2000021c
 8001334:	20000214 	.word	0x20000214
 8001338:	20000138 	.word	0x20000138

0800133c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <vTaskSuspendAll+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a03      	ldr	r2, [pc, #12]	; (8001354 <vTaskSuspendAll+0x18>)
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000238 	.word	0x20000238

08001358 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <xTaskResumeAll+0x11c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d109      	bne.n	8001382 <xTaskResumeAll+0x2a>
 800136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001372:	f383 8811 	msr	BASEPRI, r3
 8001376:	f3bf 8f6f 	isb	sy
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	e7fe      	b.n	8001380 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001382:	f000 fc23 	bl	8001bcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <xTaskResumeAll+0x11c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	4a39      	ldr	r2, [pc, #228]	; (8001474 <xTaskResumeAll+0x11c>)
 800138e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <xTaskResumeAll+0x11c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d165      	bne.n	8001464 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <xTaskResumeAll+0x120>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d061      	beq.n	8001464 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80013a0:	e032      	b.n	8001408 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013a2:	4b36      	ldr	r3, [pc, #216]	; (800147c <xTaskResumeAll+0x124>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3318      	adds	r3, #24
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fd10 	bl	8000dd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3304      	adds	r3, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fd0b 	bl	8000dd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fa07 	bl	80037d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	2201      	movs	r2, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <xTaskResumeAll+0x128>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	4a2a      	ldr	r2, [pc, #168]	; (8001480 <xTaskResumeAll+0x128>)
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <xTaskResumeAll+0x12c>)
 80013e6:	441a      	add	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3304      	adds	r3, #4
 80013ec:	4619      	mov	r1, r3
 80013ee:	4610      	mov	r0, r2
 80013f0:	f7ff fc93 	bl	8000d1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <xTaskResumeAll+0x130>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	429a      	cmp	r2, r3
 8001400:	d302      	bcc.n	8001408 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <xTaskResumeAll+0x134>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <xTaskResumeAll+0x124>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1c8      	bne.n	80013a2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001416:	f000 fa19 	bl	800184c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <xTaskResumeAll+0x138>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d010      	beq.n	8001448 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001426:	f000 f859 	bl	80014dc <xTaskIncrementTick>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <xTaskResumeAll+0x134>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3b01      	subs	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f1      	bne.n	8001426 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <xTaskResumeAll+0x138>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <xTaskResumeAll+0x134>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d009      	beq.n	8001464 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001450:	2301      	movs	r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <xTaskResumeAll+0x13c>)
 8001456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	f3bf 8f4f 	dsb	sy
 8001460:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001464:	f000 fbe0 	bl	8001c28 <vPortExitCritical>

	return xAlreadyYielded;
 8001468:	68bb      	ldr	r3, [r7, #8]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000238 	.word	0x20000238
 8001478:	20000210 	.word	0x20000210
 800147c:	200001d0 	.word	0x200001d0
 8001480:	20000218 	.word	0x20000218
 8001484:	2000013c 	.word	0x2000013c
 8001488:	20000138 	.word	0x20000138
 800148c:	20000224 	.word	0x20000224
 8001490:	20000220 	.word	0x20000220
 8001494:	e000ed04 	.word	0xe000ed04

08001498 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <xTaskGetTickCount+0x1c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000214 	.word	0x20000214

080014b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014be:	f000 fc6b 	bl	8001d98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <xTaskGetTickCountFromISR+0x20>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80014cc:	683b      	ldr	r3, [r7, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000214 	.word	0x20000214

080014dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <xTaskIncrementTick+0x14c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 808b 	bne.w	8001606 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80014f0:	4b4e      	ldr	r3, [pc, #312]	; (800162c <xTaskIncrementTick+0x150>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80014f8:	4a4c      	ldr	r2, [pc, #304]	; (800162c <xTaskIncrementTick+0x150>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11f      	bne.n	8001544 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001504:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <xTaskIncrementTick+0x154>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d009      	beq.n	8001522 <xTaskIncrementTick+0x46>
 800150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001512:	f383 8811 	msr	BASEPRI, r3
 8001516:	f3bf 8f6f 	isb	sy
 800151a:	f3bf 8f4f 	dsb	sy
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	e7fe      	b.n	8001520 <xTaskIncrementTick+0x44>
 8001522:	4b43      	ldr	r3, [pc, #268]	; (8001630 <xTaskIncrementTick+0x154>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <xTaskIncrementTick+0x158>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a40      	ldr	r2, [pc, #256]	; (8001630 <xTaskIncrementTick+0x154>)
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4a40      	ldr	r2, [pc, #256]	; (8001634 <xTaskIncrementTick+0x158>)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	4b40      	ldr	r3, [pc, #256]	; (8001638 <xTaskIncrementTick+0x15c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	4a3e      	ldr	r2, [pc, #248]	; (8001638 <xTaskIncrementTick+0x15c>)
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	f000 f984 	bl	800184c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001544:	4b3d      	ldr	r3, [pc, #244]	; (800163c <xTaskIncrementTick+0x160>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	429a      	cmp	r2, r3
 800154c:	d34c      	bcc.n	80015e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <xTaskIncrementTick+0x154>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d104      	bne.n	8001562 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001558:	4b38      	ldr	r3, [pc, #224]	; (800163c <xTaskIncrementTick+0x160>)
 800155a:	f04f 32ff 	mov.w	r2, #4294967295
 800155e:	601a      	str	r2, [r3, #0]
					break;
 8001560:	e042      	b.n	80015e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <xTaskIncrementTick+0x154>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d203      	bcs.n	8001582 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800157a:	4a30      	ldr	r2, [pc, #192]	; (800163c <xTaskIncrementTick+0x160>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001580:	e032      	b.n	80015e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	3304      	adds	r3, #4
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc24 	bl	8000dd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	2b00      	cmp	r3, #0
 8001592:	d004      	beq.n	800159e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3318      	adds	r3, #24
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fc1b 	bl	8000dd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 f917 	bl	80037d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	2201      	movs	r2, #1
 80015ac:	409a      	lsls	r2, r3
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <xTaskIncrementTick+0x164>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	4a22      	ldr	r2, [pc, #136]	; (8001640 <xTaskIncrementTick+0x164>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <xTaskIncrementTick+0x168>)
 80015c6:	441a      	add	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3304      	adds	r3, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff fba3 	bl	8000d1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <xTaskIncrementTick+0x16c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	429a      	cmp	r2, r3
 80015e0:	d3b5      	bcc.n	800154e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015e6:	e7b2      	b.n	800154e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <xTaskIncrementTick+0x16c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ee:	4915      	ldr	r1, [pc, #84]	; (8001644 <xTaskIncrementTick+0x168>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d907      	bls.n	8001610 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8001600:	2301      	movs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e004      	b.n	8001610 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001606:	4b11      	ldr	r3, [pc, #68]	; (800164c <xTaskIncrementTick+0x170>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	3301      	adds	r3, #1
 800160c:	4a0f      	ldr	r2, [pc, #60]	; (800164c <xTaskIncrementTick+0x170>)
 800160e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <xTaskIncrementTick+0x174>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8001618:	2301      	movs	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800161c:	697b      	ldr	r3, [r7, #20]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000238 	.word	0x20000238
 800162c:	20000214 	.word	0x20000214
 8001630:	200001c8 	.word	0x200001c8
 8001634:	200001cc 	.word	0x200001cc
 8001638:	20000228 	.word	0x20000228
 800163c:	20000230 	.word	0x20000230
 8001640:	20000218 	.word	0x20000218
 8001644:	2000013c 	.word	0x2000013c
 8001648:	20000138 	.word	0x20000138
 800164c:	20000220 	.word	0x20000220
 8001650:	20000224 	.word	0x20000224

08001654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800165a:	4b2c      	ldr	r3, [pc, #176]	; (800170c <vTaskSwitchContext+0xb8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <vTaskSwitchContext+0xbc>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001668:	e04c      	b.n	8001704 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <vTaskSwitchContext+0xbc>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001670:	4b28      	ldr	r3, [pc, #160]	; (8001714 <vTaskSwitchContext+0xc0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	f1c3 031f 	rsb	r3, r3, #31
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	4924      	ldr	r1, [pc, #144]	; (8001718 <vTaskSwitchContext+0xc4>)
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d109      	bne.n	80016ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800169e:	f383 8811 	msr	BASEPRI, r3
 80016a2:	f3bf 8f6f 	isb	sy
 80016a6:	f3bf 8f4f 	dsb	sy
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	e7fe      	b.n	80016ac <vTaskSwitchContext+0x58>
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4613      	mov	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <vTaskSwitchContext+0xc4>)
 80016ba:	4413      	add	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	3308      	adds	r3, #8
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d104      	bne.n	80016de <vTaskSwitchContext+0x8a>
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	; (800171c <vTaskSwitchContext+0xc8>)
 80016e6:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <vTaskSwitchContext+0xc8>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <vTaskSwitchContext+0xcc>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d102      	bne.n	80016fa <vTaskSwitchContext+0xa6>
 80016f4:	f001 ffca 	bl	800368c <SEGGER_SYSVIEW_OnIdle>
}
 80016f8:	e004      	b.n	8001704 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <vTaskSwitchContext+0xc8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f002 f824 	bl	800374c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000238 	.word	0x20000238
 8001710:	20000224 	.word	0x20000224
 8001714:	20000218 	.word	0x20000218
 8001718:	2000013c 	.word	0x2000013c
 800171c:	20000138 	.word	0x20000138
 8001720:	20000234 	.word	0x20000234

08001724 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800172c:	f000 f852 	bl	80017d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <prvIdleTask+0x28>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d9f9      	bls.n	800172c <prvIdleTask+0x8>
			{
				taskYIELD();
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <prvIdleTask+0x2c>)
 800173a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	f3bf 8f4f 	dsb	sy
 8001744:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001748:	e7f0      	b.n	800172c <prvIdleTask+0x8>
 800174a:	bf00      	nop
 800174c:	2000013c 	.word	0x2000013c
 8001750:	e000ed04 	.word	0xe000ed04

08001754 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	e00c      	b.n	800177a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <prvInitialiseTaskLists+0x60>)
 800176c:	4413      	add	r3, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff faa6 	bl	8000cc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3301      	adds	r3, #1
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d9ef      	bls.n	8001760 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <prvInitialiseTaskLists+0x64>)
 8001782:	f7ff fa9d 	bl	8000cc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001786:	480d      	ldr	r0, [pc, #52]	; (80017bc <prvInitialiseTaskLists+0x68>)
 8001788:	f7ff fa9a 	bl	8000cc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <prvInitialiseTaskLists+0x6c>)
 800178e:	f7ff fa97 	bl	8000cc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001792:	480c      	ldr	r0, [pc, #48]	; (80017c4 <prvInitialiseTaskLists+0x70>)
 8001794:	f7ff fa94 	bl	8000cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <prvInitialiseTaskLists+0x74>)
 800179a:	f7ff fa91 	bl	8000cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <prvInitialiseTaskLists+0x78>)
 80017a0:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <prvInitialiseTaskLists+0x64>)
 80017a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <prvInitialiseTaskLists+0x7c>)
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <prvInitialiseTaskLists+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000013c 	.word	0x2000013c
 80017b8:	200001a0 	.word	0x200001a0
 80017bc:	200001b4 	.word	0x200001b4
 80017c0:	200001d0 	.word	0x200001d0
 80017c4:	200001e4 	.word	0x200001e4
 80017c8:	200001fc 	.word	0x200001fc
 80017cc:	200001c8 	.word	0x200001c8
 80017d0:	200001cc 	.word	0x200001cc

080017d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80017da:	e019      	b.n	8001810 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80017dc:	f000 f9f6 	bl	8001bcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <prvCheckTasksWaitingTermination+0x4c>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3304      	adds	r3, #4
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff faf1 	bl	8000dd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <prvCheckTasksWaitingTermination+0x50>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <prvCheckTasksWaitingTermination+0x50>)
 80017fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <prvCheckTasksWaitingTermination+0x54>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	3b01      	subs	r3, #1
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <prvCheckTasksWaitingTermination+0x54>)
 8001804:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001806:	f000 fa0f 	bl	8001c28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f80e 	bl	800182c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <prvCheckTasksWaitingTermination+0x54>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1e1      	bne.n	80017dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200001e4 	.word	0x200001e4
 8001824:	20000210 	.word	0x20000210
 8001828:	200001f8 	.word	0x200001f8

0800182c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4618      	mov	r0, r3
 800183a:	f000 fbad 	bl	8001f98 <vPortFree>
			vPortFree( pxTCB );
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fbaa 	bl	8001f98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <prvResetNextTaskUnblockTime+0x38>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <prvResetNextTaskUnblockTime+0x3c>)
 800185e:	f04f 32ff 	mov.w	r2, #4294967295
 8001862:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001864:	e008      	b.n	8001878 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <prvResetNextTaskUnblockTime+0x38>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <prvResetNextTaskUnblockTime+0x3c>)
 8001876:	6013      	str	r3, [r2, #0]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200001c8 	.word	0x200001c8
 8001888:	20000230 	.word	0x20000230

0800188c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001896:	4b32      	ldr	r3, [pc, #200]	; (8001960 <prvAddCurrentTaskToDelayedList+0xd4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800189c:	4b31      	ldr	r3, [pc, #196]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3304      	adds	r3, #4
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fa96 	bl	8000dd4 <uxListRemove>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10b      	bne.n	80018c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	4b2a      	ldr	r3, [pc, #168]	; (8001968 <prvAddCurrentTaskToDelayedList+0xdc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4013      	ands	r3, r2
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <prvAddCurrentTaskToDelayedList+0xdc>)
 80018c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d110      	bne.n	80018f0 <prvAddCurrentTaskToDelayedList+0x64>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00d      	beq.n	80018f0 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	211b      	movs	r1, #27
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 ffbe 	bl	800385c <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3304      	adds	r3, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4820      	ldr	r0, [pc, #128]	; (800196c <prvAddCurrentTaskToDelayedList+0xe0>)
 80018ea:	f7ff fa16 	bl	8000d1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80018ee:	e032      	b.n	8001956 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80018f0:	68fa      	ldr	r2, [r7, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001900:	68ba      	ldr	r2, [r7, #8]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	429a      	cmp	r2, r3
 8001906:	d20f      	bcs.n	8001928 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2104      	movs	r1, #4
 800190e:	4618      	mov	r0, r3
 8001910:	f001 ffa4 	bl	800385c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3304      	adds	r3, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7ff fa1e 	bl	8000d62 <vListInsert>
}
 8001926:	e016      	b.n	8001956 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2104      	movs	r1, #4
 800192e:	4618      	mov	r0, r3
 8001930:	f001 ff94 	bl	800385c <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <prvAddCurrentTaskToDelayedList+0xe8>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <prvAddCurrentTaskToDelayedList+0xd8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	3304      	adds	r3, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4610      	mov	r0, r2
 8001942:	f7ff fa0e 	bl	8000d62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <prvAddCurrentTaskToDelayedList+0xec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	429a      	cmp	r2, r3
 800194e:	d202      	bcs.n	8001956 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8001950:	4a09      	ldr	r2, [pc, #36]	; (8001978 <prvAddCurrentTaskToDelayedList+0xec>)
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	6013      	str	r3, [r2, #0]
}
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000214 	.word	0x20000214
 8001964:	20000138 	.word	0x20000138
 8001968:	20000218 	.word	0x20000218
 800196c:	200001fc 	.word	0x200001fc
 8001970:	200001cc 	.word	0x200001cc
 8001974:	200001c8 	.word	0x200001c8
 8001978:	20000230 	.word	0x20000230

0800197c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3b04      	subs	r3, #4
 800198c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3b04      	subs	r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f023 0201 	bic.w	r2, r3, #1
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3b04      	subs	r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80019ac:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <pxPortInitialiseStack+0x64>)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3b14      	subs	r3, #20
 80019b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3b04      	subs	r3, #4
 80019c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f06f 0202 	mvn.w	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	3b20      	subs	r3, #32
 80019d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	080019e5 	.word	0x080019e5

080019e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <prvTaskExitError+0x50>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d009      	beq.n	8001a0c <prvTaskExitError+0x28>
 80019f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fc:	f383 8811 	msr	BASEPRI, r3
 8001a00:	f3bf 8f6f 	isb	sy
 8001a04:	f3bf 8f4f 	dsb	sy
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e7fe      	b.n	8001a0a <prvTaskExitError+0x26>
 8001a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a10:	f383 8811 	msr	BASEPRI, r3
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001a1e:	bf00      	nop
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0fc      	beq.n	8001a20 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000014 	.word	0x20000014
	...

08001a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001a40:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <pxCurrentTCBConst2>)
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	6808      	ldr	r0, [r1, #0]
 8001a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a4a:	f380 8809 	msr	PSP, r0
 8001a4e:	f3bf 8f6f 	isb	sy
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	f380 8811 	msr	BASEPRI, r0
 8001a5a:	4770      	bx	lr
 8001a5c:	f3af 8000 	nop.w

08001a60 <pxCurrentTCBConst2>:
 8001a60:	20000138 	.word	0x20000138
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop

08001a68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001a68:	4808      	ldr	r0, [pc, #32]	; (8001a8c <prvPortStartFirstTask+0x24>)
 8001a6a:	6800      	ldr	r0, [r0, #0]
 8001a6c:	6800      	ldr	r0, [r0, #0]
 8001a6e:	f380 8808 	msr	MSP, r0
 8001a72:	f04f 0000 	mov.w	r0, #0
 8001a76:	f380 8814 	msr	CONTROL, r0
 8001a7a:	b662      	cpsie	i
 8001a7c:	b661      	cpsie	f
 8001a7e:	f3bf 8f4f 	dsb	sy
 8001a82:	f3bf 8f6f 	isb	sy
 8001a86:	df00      	svc	0
 8001a88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001a8a:	bf00      	nop
 8001a8c:	e000ed08 	.word	0xe000ed08

08001a90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <xPortStartScheduler+0x118>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a44      	ldr	r2, [pc, #272]	; (8001bac <xPortStartScheduler+0x11c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d109      	bne.n	8001ab4 <xPortStartScheduler+0x24>
 8001aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e7fe      	b.n	8001ab2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001ab4:	4b3c      	ldr	r3, [pc, #240]	; (8001ba8 <xPortStartScheduler+0x118>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <xPortStartScheduler+0x120>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d109      	bne.n	8001ad2 <xPortStartScheduler+0x42>
 8001abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac2:	f383 8811 	msr	BASEPRI, r3
 8001ac6:	f3bf 8f6f 	isb	sy
 8001aca:	f3bf 8f4f 	dsb	sy
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	e7fe      	b.n	8001ad0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <xPortStartScheduler+0x124>)
 8001ad4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	22ff      	movs	r2, #255	; 0xff
 8001ae2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <xPortStartScheduler+0x128>)
 8001af8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b00:	e009      	b.n	8001b16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b0c:	78fb      	ldrb	r3, [r7, #3]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b16:	78fb      	ldrb	r3, [r7, #3]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1e:	2b80      	cmp	r3, #128	; 0x80
 8001b20:	d0ef      	beq.n	8001b02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f1c3 0307 	rsb	r3, r3, #7
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d009      	beq.n	8001b42 <xPortStartScheduler+0xb2>
 8001b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b32:	f383 8811 	msr	BASEPRI, r3
 8001b36:	f3bf 8f6f 	isb	sy
 8001b3a:	f3bf 8f4f 	dsb	sy
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	e7fe      	b.n	8001b40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <xPortStartScheduler+0x12c>)
 8001b56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001b60:	4b17      	ldr	r3, [pc, #92]	; (8001bc0 <xPortStartScheduler+0x130>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <xPortStartScheduler+0x130>)
 8001b66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <xPortStartScheduler+0x130>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <xPortStartScheduler+0x130>)
 8001b72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8001b76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001b78:	f000 f8e0 	bl	8001d3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <xPortStartScheduler+0x134>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001b82:	f000 f8ff 	bl	8001d84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <xPortStartScheduler+0x138>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <xPortStartScheduler+0x138>)
 8001b8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001b92:	f7ff ff69 	bl	8001a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001b96:	f7ff fd5d 	bl	8001654 <vTaskSwitchContext>
	prvTaskExitError();
 8001b9a:	f7ff ff23 	bl	80019e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001b9e:	2300      	movs	r3, #0
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	e000ed00 	.word	0xe000ed00
 8001bac:	410fc271 	.word	0x410fc271
 8001bb0:	410fc270 	.word	0x410fc270
 8001bb4:	e000e400 	.word	0xe000e400
 8001bb8:	2000023c 	.word	0x2000023c
 8001bbc:	20000240 	.word	0x20000240
 8001bc0:	e000ed20 	.word	0xe000ed20
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	e000ef34 	.word	0xe000ef34

08001bcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd6:	f383 8811 	msr	BASEPRI, r3
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <vPortEnterCritical+0x54>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <vPortEnterCritical+0x54>)
 8001bec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <vPortEnterCritical+0x54>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10e      	bne.n	8001c14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <vPortEnterCritical+0x58>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d009      	beq.n	8001c14 <vPortEnterCritical+0x48>
 8001c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c04:	f383 8811 	msr	BASEPRI, r3
 8001c08:	f3bf 8f6f 	isb	sy
 8001c0c:	f3bf 8f4f 	dsb	sy
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	e7fe      	b.n	8001c12 <vPortEnterCritical+0x46>
	}
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	20000014 	.word	0x20000014
 8001c24:	e000ed04 	.word	0xe000ed04

08001c28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <vPortExitCritical+0x4c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <vPortExitCritical+0x22>
 8001c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c3a:	f383 8811 	msr	BASEPRI, r3
 8001c3e:	f3bf 8f6f 	isb	sy
 8001c42:	f3bf 8f4f 	dsb	sy
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	e7fe      	b.n	8001c48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <vPortExitCritical+0x4c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	4a08      	ldr	r2, [pc, #32]	; (8001c74 <vPortExitCritical+0x4c>)
 8001c52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <vPortExitCritical+0x4c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <vPortExitCritical+0x3e>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000014 	.word	0x20000014
	...

08001c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001c80:	f3ef 8009 	mrs	r0, PSP
 8001c84:	f3bf 8f6f 	isb	sy
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <pxCurrentTCBConst>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	f01e 0f10 	tst.w	lr, #16
 8001c90:	bf08      	it	eq
 8001c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c9a:	6010      	str	r0, [r2, #0]
 8001c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ca4:	f380 8811 	msr	BASEPRI, r0
 8001ca8:	f3bf 8f4f 	dsb	sy
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f7ff fcd0 	bl	8001654 <vTaskSwitchContext>
 8001cb4:	f04f 0000 	mov.w	r0, #0
 8001cb8:	f380 8811 	msr	BASEPRI, r0
 8001cbc:	bc09      	pop	{r0, r3}
 8001cbe:	6819      	ldr	r1, [r3, #0]
 8001cc0:	6808      	ldr	r0, [r1, #0]
 8001cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cc6:	f01e 0f10 	tst.w	lr, #16
 8001cca:	bf08      	it	eq
 8001ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001cd0:	f380 8809 	msr	PSP, r0
 8001cd4:	f3bf 8f6f 	isb	sy
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	f3af 8000 	nop.w

08001ce0 <pxCurrentTCBConst>:
 8001ce0:	20000138 	.word	0x20000138
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop

08001ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
	__asm volatile
 8001cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf2:	f383 8811 	msr	BASEPRI, r3
 8001cf6:	f3bf 8f6f 	isb	sy
 8001cfa:	f3bf 8f4f 	dsb	sy
 8001cfe:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8001d00:	f001 fc4a 	bl	8003598 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001d04:	f7ff fbea 	bl	80014dc <xTaskIncrementTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <SysTick_Handler+0x34>
		{
			traceISR_EXIT_TO_SCHEDULER();
 8001d0e:	f001 fca1 	bl	8003654 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <SysTick_Handler+0x50>)
 8001d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e003      	b.n	8001d24 <SysTick_Handler+0x3c>
		}
		else
		{
			traceISR_EXIT();
 8001d1c:	f001 fc7e 	bl	800361c <SEGGER_SYSVIEW_RecordExitISR>
			vTaskSwitchContext();
 8001d20:	f7ff fc98 	bl	8001654 <vTaskSwitchContext>
 8001d24:	2300      	movs	r3, #0
 8001d26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	e000ed04 	.word	0xe000ed04

08001d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <vPortSetupTimerInterrupt+0x34>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <vPortSetupTimerInterrupt+0x38>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <vPortSetupTimerInterrupt+0x3c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <vPortSetupTimerInterrupt+0x40>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	099b      	lsrs	r3, r3, #6
 8001d58:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <vPortSetupTimerInterrupt+0x44>)
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <vPortSetupTimerInterrupt+0x34>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010
 8001d74:	e000e018 	.word	0xe000e018
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	10624dd3 	.word	0x10624dd3
 8001d80:	e000e014 	.word	0xe000e014

08001d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d94 <vPortEnableVFP+0x10>
 8001d88:	6801      	ldr	r1, [r0, #0]
 8001d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001d8e:	6001      	str	r1, [r0, #0]
 8001d90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8001d92:	bf00      	nop
 8001d94:	e000ed88 	.word	0xe000ed88

08001d98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001d9e:	f3ef 8305 	mrs	r3, IPSR
 8001da2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d913      	bls.n	8001dd2 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001daa:	4a16      	ldr	r2, [pc, #88]	; (8001e04 <vPortValidateInterruptPriority+0x6c>)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001db4:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <vPortValidateInterruptPriority+0x70>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	7afa      	ldrb	r2, [r7, #11]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d209      	bcs.n	8001dd2 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8001dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	f3bf 8f6f 	isb	sy
 8001dca:	f3bf 8f4f 	dsb	sy
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	e7fe      	b.n	8001dd0 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <vPortValidateInterruptPriority+0x74>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <vPortValidateInterruptPriority+0x78>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d909      	bls.n	8001df6 <vPortValidateInterruptPriority+0x5e>
 8001de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de6:	f383 8811 	msr	BASEPRI, r3
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	f3bf 8f4f 	dsb	sy
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	e7fe      	b.n	8001df4 <vPortValidateInterruptPriority+0x5c>
	}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000e3f0 	.word	0xe000e3f0
 8001e08:	2000023c 	.word	0x2000023c
 8001e0c:	e000ed0c 	.word	0xe000ed0c
 8001e10:	20000240 	.word	0x20000240

08001e14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001e20:	f7ff fa8c 	bl	800133c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <pvPortMalloc+0x170>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001e2c:	f000 f90c 	bl	8002048 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001e30:	4b55      	ldr	r3, [pc, #340]	; (8001f88 <pvPortMalloc+0x174>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f040 808c 	bne.w	8001f56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d01c      	beq.n	8001e7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001e44:	2208      	movs	r2, #8
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d013      	beq.n	8001e7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f023 0307 	bic.w	r3, r3, #7
 8001e5c:	3308      	adds	r3, #8
 8001e5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <pvPortMalloc+0x6a>
 8001e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e6e:	f383 8811 	msr	BASEPRI, r3
 8001e72:	f3bf 8f6f 	isb	sy
 8001e76:	f3bf 8f4f 	dsb	sy
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	e7fe      	b.n	8001e7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d068      	beq.n	8001f56 <pvPortMalloc+0x142>
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <pvPortMalloc+0x178>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d863      	bhi.n	8001f56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001e8e:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <pvPortMalloc+0x17c>)
 8001e90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <pvPortMalloc+0x17c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001e98:	e004      	b.n	8001ea4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d903      	bls.n	8001eb6 <pvPortMalloc+0xa2>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f1      	bne.n	8001e9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <pvPortMalloc+0x170>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d04a      	beq.n	8001f56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ec0:	6a3b      	ldr	r3, [r7, #32]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4413      	add	r3, r2
 8001ec8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	6a3b      	ldr	r3, [r7, #32]
 8001ed0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1ad2      	subs	r2, r2, r3
 8001eda:	2308      	movs	r3, #8
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d91e      	bls.n	8001f20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <pvPortMalloc+0xf4>
 8001ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef8:	f383 8811 	msr	BASEPRI, r3
 8001efc:	f3bf 8f6f 	isb	sy
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	e7fe      	b.n	8001f06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001f1a:	69b8      	ldr	r0, [r7, #24]
 8001f1c:	f000 f8f6 	bl	800210c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <pvPortMalloc+0x178>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <pvPortMalloc+0x178>)
 8001f2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <pvPortMalloc+0x178>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <pvPortMalloc+0x180>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d203      	bcs.n	8001f42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <pvPortMalloc+0x178>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <pvPortMalloc+0x180>)
 8001f40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <pvPortMalloc+0x174>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001f56:	f7ff f9ff 	bl	8001358 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d009      	beq.n	8001f78 <pvPortMalloc+0x164>
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	e7fe      	b.n	8001f76 <pvPortMalloc+0x162>
	return pvReturn;
 8001f78:	69fb      	ldr	r3, [r7, #28]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20012e4c 	.word	0x20012e4c
 8001f88:	20012e58 	.word	0x20012e58
 8001f8c:	20012e50 	.word	0x20012e50
 8001f90:	20012e44 	.word	0x20012e44
 8001f94:	20012e54 	.word	0x20012e54

08001f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d046      	beq.n	8002038 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001faa:	2308      	movs	r3, #8
 8001fac:	425b      	negs	r3, r3
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4b20      	ldr	r3, [pc, #128]	; (8002040 <vPortFree+0xa8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d109      	bne.n	8001fda <vPortFree+0x42>
 8001fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e7fe      	b.n	8001fd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d009      	beq.n	8001ff6 <vPortFree+0x5e>
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	e7fe      	b.n	8001ff4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <vPortFree+0xa8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d019      	beq.n	8002038 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d115      	bne.n	8002038 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <vPortFree+0xa8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800201c:	f7ff f98e 	bl	800133c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <vPortFree+0xac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4413      	add	r3, r2
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <vPortFree+0xac>)
 800202c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800202e:	6938      	ldr	r0, [r7, #16]
 8002030:	f000 f86c 	bl	800210c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002034:	f7ff f990 	bl	8001358 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002038:	bf00      	nop
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20012e58 	.word	0x20012e58
 8002044:	20012e50 	.word	0x20012e50

08002048 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800204e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002052:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <prvHeapInit+0xac>)
 8002056:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00c      	beq.n	800207c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3307      	adds	r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0307 	bic.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <prvHeapInit+0xac>)
 8002078:	4413      	add	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <prvHeapInit+0xb0>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002086:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <prvHeapInit+0xb0>)
 8002088:	2200      	movs	r2, #0
 800208a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002094:	2208      	movs	r2, #8
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1a9b      	subs	r3, r3, r2
 800209a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0307 	bic.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <prvHeapInit+0xb4>)
 80020a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <prvHeapInit+0xb4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <prvHeapInit+0xb4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	1ad2      	subs	r2, r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <prvHeapInit+0xb4>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <prvHeapInit+0xb8>)
 80020d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	4a09      	ldr	r2, [pc, #36]	; (8002104 <prvHeapInit+0xbc>)
 80020de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <prvHeapInit+0xc0>)
 80020e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80020e6:	601a      	str	r2, [r3, #0]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	20000244 	.word	0x20000244
 80020f8:	20012e44 	.word	0x20012e44
 80020fc:	20012e4c 	.word	0x20012e4c
 8002100:	20012e54 	.word	0x20012e54
 8002104:	20012e50 	.word	0x20012e50
 8002108:	20012e58 	.word	0x20012e58

0800210c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <prvInsertBlockIntoFreeList+0xac>)
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	e002      	b.n	8002120 <prvInsertBlockIntoFreeList+0x14>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	429a      	cmp	r2, r3
 8002128:	d8f7      	bhi.n	800211a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	4413      	add	r3, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	429a      	cmp	r2, r3
 800213a:	d108      	bne.n	800214e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	441a      	add	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	441a      	add	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d118      	bne.n	8002194 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <prvInsertBlockIntoFreeList+0xb0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d00d      	beq.n	800218a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e008      	b.n	800219c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <prvInsertBlockIntoFreeList+0xb0>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e003      	b.n	800219c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d002      	beq.n	80021aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20012e44 	.word	0x20012e44
 80021bc:	20012e4c 	.word	0x20012e4c

080021c0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80021c4:	4803      	ldr	r0, [pc, #12]	; (80021d4 <_cbSendSystemDesc+0x14>)
 80021c6:	f001 f993 	bl	80034f0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80021ca:	4803      	ldr	r0, [pc, #12]	; (80021d8 <_cbSendSystemDesc+0x18>)
 80021cc:	f001 f990 	bl	80034f0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	08003cd8 	.word	0x08003cd8
 80021d8:	08003d20 	.word	0x08003d20

080021dc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <SEGGER_SYSVIEW_Conf+0x20>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <SEGGER_SYSVIEW_Conf+0x20>)
 80021e6:	6819      	ldr	r1, [r3, #0]
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <SEGGER_SYSVIEW_Conf+0x24>)
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <SEGGER_SYSVIEW_Conf+0x28>)
 80021ec:	f000 fe08 	bl	8002e00 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80021f0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80021f4:	f000 fe42 	bl	8002e7c <SEGGER_SYSVIEW_SetRAMBase>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000000 	.word	0x20000000
 8002200:	080021c1 	.word	0x080021c1
 8002204:	08003db8 	.word	0x08003db8

08002208 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220a:	b085      	sub	sp, #20
 800220c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	e034      	b.n	800227e <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002214:	491e      	ldr	r1, [pc, #120]	; (8002290 <_cbSendTaskList+0x88>)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	491a      	ldr	r1, [pc, #104]	; (8002290 <_cbSendTaskList+0x88>)
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	3304      	adds	r3, #4
 8002234:	681c      	ldr	r4, [r3, #0]
 8002236:	4916      	ldr	r1, [pc, #88]	; (8002290 <_cbSendTaskList+0x88>)
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3308      	adds	r3, #8
 8002246:	681d      	ldr	r5, [r3, #0]
 8002248:	4911      	ldr	r1, [pc, #68]	; (8002290 <_cbSendTaskList+0x88>)
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	330c      	adds	r3, #12
 8002258:	681e      	ldr	r6, [r3, #0]
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <_cbSendTaskList+0x88>)
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3310      	adds	r3, #16
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4633      	mov	r3, r6
 8002270:	462a      	mov	r2, r5
 8002272:	4621      	mov	r1, r4
 8002274:	f000 f970 	bl	8002558 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3301      	adds	r3, #1
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <_cbSendTaskList+0x8c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	d3c5      	bcc.n	8002214 <_cbSendTaskList+0xc>
  }
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002290:	20012e5c 	.word	0x20012e5c
 8002294:	20012efc 	.word	0x20012efc

08002298 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800229e:	f7ff f90b 	bl	80014b8 <xTaskGetTickCountFromISR>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f04f 0400 	mov.w	r4, #0
 80022a8:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80022ac:	e9d7 5600 	ldrd	r5, r6, [r7]
 80022b0:	462b      	mov	r3, r5
 80022b2:	4634      	mov	r4, r6
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	0162      	lsls	r2, r4, #5
 80022be:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80022c2:	0159      	lsls	r1, r3, #5
 80022c4:	460b      	mov	r3, r1
 80022c6:	4614      	mov	r4, r2
 80022c8:	1b5b      	subs	r3, r3, r5
 80022ca:	eb64 0406 	sbc.w	r4, r4, r6
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	00a2      	lsls	r2, r4, #2
 80022d8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 80022dc:	0099      	lsls	r1, r3, #2
 80022de:	460b      	mov	r3, r1
 80022e0:	4614      	mov	r4, r2
 80022e2:	195b      	adds	r3, r3, r5
 80022e4:	eb44 0406 	adc.w	r4, r4, r6
 80022e8:	f04f 0100 	mov.w	r1, #0
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	00e2      	lsls	r2, r4, #3
 80022f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022f6:	00d9      	lsls	r1, r3, #3
 80022f8:	460b      	mov	r3, r1
 80022fa:	4614      	mov	r4, r2
 80022fc:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8002300:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8002304:	4618      	mov	r0, r3
 8002306:	4621      	mov	r1, r4
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002310 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800231e:	2205      	movs	r2, #5
 8002320:	492b      	ldr	r1, [pc, #172]	; (80023d0 <SYSVIEW_AddTask+0xc0>)
 8002322:	68b8      	ldr	r0, [r7, #8]
 8002324:	f001 fc68 	bl	8003bf8 <memcmp>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04b      	beq.n	80023c6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800232e:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b07      	cmp	r3, #7
 8002334:	d903      	bls.n	800233e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002336:	4828      	ldr	r0, [pc, #160]	; (80023d8 <SYSVIEW_AddTask+0xc8>)
 8002338:	f001 fbde 	bl	8003af8 <SEGGER_SYSVIEW_Warn>
    return;
 800233c:	e044      	b.n	80023c8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800233e:	4b25      	ldr	r3, [pc, #148]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4926      	ldr	r1, [pc, #152]	; (80023dc <SYSVIEW_AddTask+0xcc>)
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	4921      	ldr	r1, [pc, #132]	; (80023dc <SYSVIEW_AddTask+0xcc>)
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	3304      	adds	r3, #4
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002368:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	491b      	ldr	r1, [pc, #108]	; (80023dc <SYSVIEW_AddTask+0xcc>)
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	3308      	adds	r3, #8
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4916      	ldr	r1, [pc, #88]	; (80023dc <SYSVIEW_AddTask+0xcc>)
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	330c      	adds	r3, #12
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4910      	ldr	r1, [pc, #64]	; (80023dc <SYSVIEW_AddTask+0xcc>)
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	3310      	adds	r3, #16
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3301      	adds	r3, #1
 80023b0:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <SYSVIEW_AddTask+0xc4>)
 80023b2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8ca 	bl	8002558 <SYSVIEW_SendTaskInfo>
 80023c4:	e000      	b.n	80023c8 <SYSVIEW_AddTask+0xb8>
    return;
 80023c6:	bf00      	nop

}
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	08003d30 	.word	0x08003d30
 80023d4:	20012efc 	.word	0x20012efc
 80023d8:	08003d38 	.word	0x08003d38
 80023dc:	20012e5c 	.word	0x20012e5c

080023e0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80ab 	beq.w	8002548 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e00d      	b.n	8002414 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 80023f8:	4956      	ldr	r1, [pc, #344]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	429a      	cmp	r2, r3
 800240c:	d008      	beq.n	8002420 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	3301      	adds	r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	429a      	cmp	r2, r3
 800241c:	d3ec      	bcc.n	80023f8 <SYSVIEW_DeleteTask+0x18>
 800241e:	e000      	b.n	8002422 <SYSVIEW_DeleteTask+0x42>
      break;
 8002420:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8002422:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3b01      	subs	r3, #1
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	429a      	cmp	r2, r3
 800242c:	d111      	bne.n	8002452 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4a46      	ldr	r2, [pc, #280]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 800243a:	4413      	add	r3, r2
 800243c:	2214      	movs	r2, #20
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f001 fbf3 	bl	8003c2c <memset>
    _NumTasks--;
 8002446:	4b42      	ldr	r3, [pc, #264]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	3b01      	subs	r3, #1
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	e07b      	b.n	800254a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d276      	bcs.n	800254a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800245c:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	493c      	ldr	r1, [pc, #240]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002464:	4613      	mov	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	4838      	ldr	r0, [pc, #224]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4403      	add	r3, r0
 800247e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8002480:	4b33      	ldr	r3, [pc, #204]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1e5a      	subs	r2, r3, #1
 8002486:	4933      	ldr	r1, [pc, #204]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002488:	4613      	mov	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	3304      	adds	r3, #4
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	482f      	ldr	r0, [pc, #188]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4613      	mov	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4403      	add	r3, r0
 80024a4:	3304      	adds	r3, #4
 80024a6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80024a8:	4b29      	ldr	r3, [pc, #164]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	4929      	ldr	r1, [pc, #164]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3308      	adds	r3, #8
 80024bc:	6819      	ldr	r1, [r3, #0]
 80024be:	4825      	ldr	r0, [pc, #148]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4403      	add	r3, r0
 80024cc:	3308      	adds	r3, #8
 80024ce:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80024d0:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	491f      	ldr	r1, [pc, #124]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	330c      	adds	r3, #12
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	481b      	ldr	r0, [pc, #108]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4403      	add	r3, r0
 80024f4:	330c      	adds	r3, #12
 80024f6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	4915      	ldr	r1, [pc, #84]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3310      	adds	r3, #16
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	4811      	ldr	r0, [pc, #68]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4403      	add	r3, r0
 800251c:	3310      	adds	r3, #16
 800251e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <SYSVIEW_DeleteTask+0x174>)
 8002530:	4413      	add	r3, r2
 8002532:	2214      	movs	r2, #20
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f001 fb78 	bl	8003c2c <memset>
    _NumTasks--;
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	3b01      	subs	r3, #1
 8002542:	4a03      	ldr	r2, [pc, #12]	; (8002550 <SYSVIEW_DeleteTask+0x170>)
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e000      	b.n	800254a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8002548:	bf00      	nop
  }
}
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20012efc 	.word	0x20012efc
 8002554:	20012e5c 	.word	0x20012e5c

08002558 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002566:	f107 0314 	add.w	r3, r7, #20
 800256a:	2214      	movs	r2, #20
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f001 fb5c 	bl	8003c2c <memset>
  TaskInfo.TaskID     = TaskID;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4618      	mov	r0, r3
 800258e:	f000 feb5 	bl	80032fc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002592:	bf00      	nop
 8002594:	3728      	adds	r7, #40	; 0x28
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <_DoInit+0x8c>)
 80025a4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2203      	movs	r2, #3
 80025aa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <_DoInit+0x90>)
 80025b6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <_DoInit+0x94>)
 80025bc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <_DoInit+0x90>)
 80025dc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <_DoInit+0x98>)
 80025e2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2210      	movs	r2, #16
 80025e8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3307      	adds	r3, #7
 8002600:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <_DoInit+0x9c>)
 8002602:	6810      	ldr	r0, [r2, #0]
 8002604:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a0c      	ldr	r2, [pc, #48]	; (800263c <_DoInit+0xa0>)
 800260a:	6810      	ldr	r0, [r2, #0]
 800260c:	6018      	str	r0, [r3, #0]
 800260e:	8891      	ldrh	r1, [r2, #4]
 8002610:	7992      	ldrb	r2, [r2, #6]
 8002612:	8099      	strh	r1, [r3, #4]
 8002614:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	719a      	strb	r2, [r3, #6]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	2001742c 	.word	0x2001742c
 800262c:	08003d88 	.word	0x08003d88
 8002630:	20012f00 	.word	0x20012f00
 8002634:	20013300 	.word	0x20013300
 8002638:	08003d94 	.word	0x08003d94
 800263c:	08003d98 	.word	0x08003d98

08002640 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800264c:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <SEGGER_RTT_ReadNoLock+0x100>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <SEGGER_RTT_ReadNoLock+0x18>
 8002654:	f7ff ffa2 	bl	800259c <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	3360      	adds	r3, #96	; 0x60
 8002664:	4a36      	ldr	r2, [pc, #216]	; (8002740 <SEGGER_RTT_ReadNoLock+0x100>)
 8002666:	4413      	add	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d92a      	bls.n	80026dc <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4293      	cmp	r3, r2
 8002696:	bf28      	it	cs
 8002698:	4613      	movcs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	4413      	add	r3, r2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	4619      	mov	r1, r3
 80026a8:	69f8      	ldr	r0, [r7, #28]
 80026aa:	f001 fab4 	bl	8003c16 <memcpy>
    NumBytesRead += NumBytesRem;
 80026ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4413      	add	r3, r2
 80026cc:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	6a3a      	ldr	r2, [r7, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d101      	bne.n	80026dc <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80026d8:	2300      	movs	r3, #0
 80026da:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf28      	it	cs
 80026ec:	4613      	movcs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d018      	beq.n	8002728 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	4413      	add	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	4619      	mov	r1, r3
 8002702:	69f8      	ldr	r0, [r7, #28]
 8002704:	f001 fa87 	bl	8003c16 <memcpy>
    NumBytesRead += NumBytesRem;
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8002720:	6a3a      	ldr	r2, [r7, #32]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002736:	4618      	mov	r0, r3
 8002738:	3728      	adds	r7, #40	; 0x28
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	2001742c 	.word	0x2001742c

08002744 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	; 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4a3f      	ldr	r2, [pc, #252]	; (8002860 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8002762:	4413      	add	r3, r2
 8002764:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	429a      	cmp	r2, r3
 8002778:	d854      	bhi.n	8002824 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	d30f      	bcc.n	80027ae <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	4413      	add	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fa3b 	bl	8003c16 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	441a      	add	r2, r3
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e054      	b.n	8002858 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4413      	add	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d34b      	bcc.n	8002856 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d90e      	bls.n	80027ee <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027dc:	4618      	mov	r0, r3
 80027de:	f001 fa1a 	bl	8003c16 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	441a      	add	r2, r3
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	60da      	str	r2, [r3, #12]
 80027ec:	e018      	b.n	8002820 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027fa:	4618      	mov	r0, r3
 80027fc:	f001 fa0b 	bl	8003c16 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	6858      	ldr	r0, [r3, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	18d1      	adds	r1, r2, r3
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	461a      	mov	r2, r3
 8002812:	f001 fa00 	bl	8003c16 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad2      	subs	r2, r2, r3
 800281c:	6a3b      	ldr	r3, [r7, #32]
 800281e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8002820:	2301      	movs	r3, #1
 8002822:	e019      	b.n	8002858 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8002824:	69fa      	ldr	r2, [r7, #28]
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d30f      	bcc.n	8002856 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f9e7 	bl	8003c16 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	441a      	add	r2, r3
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	2001742c 	.word	0x2001742c

08002864 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002872:	4b30      	ldr	r3, [pc, #192]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800287a:	f7ff fe8f 	bl	800259c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	461a      	mov	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4293      	cmp	r3, r2
 8002888:	d24c      	bcs.n	8002924 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800288a:	f3ef 8311 	mrs	r3, BASEPRI
 800288e:	f04f 0120 	mov.w	r1, #32
 8002892:	f381 8811 	msr	BASEPRI, r1
 8002896:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d032      	beq.n	8002904 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 800289e:	4925      	ldr	r1, [pc, #148]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80028b2:	4920      	ldr	r1, [pc, #128]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3304      	adds	r3, #4
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80028c8:	491a      	ldr	r1, [pc, #104]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	3320      	adds	r3, #32
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80028dc:	4915      	ldr	r1, [pc, #84]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	3328      	adds	r3, #40	; 0x28
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80028f0:	4910      	ldr	r1, [pc, #64]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3324      	adds	r3, #36	; 0x24
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8002904:	490b      	ldr	r1, [pc, #44]	; (8002934 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	332c      	adds	r3, #44	; 0x2c
 8002914:	6a3a      	ldr	r2, [r7, #32]
 8002916:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e002      	b.n	800292a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	617b      	str	r3, [r7, #20]
  }
  return r;
 800292a:	697b      	ldr	r3, [r7, #20]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	2001742c 	.word	0x2001742c

08002938 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800294e:	f7ff fe25 	bl	800259c <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8002952:	4b2d      	ldr	r3, [pc, #180]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4293      	cmp	r3, r2
 800295c:	d24b      	bcs.n	80029f6 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800295e:	f3ef 8311 	mrs	r3, BASEPRI
 8002962:	f04f 0120 	mov.w	r1, #32
 8002966:	f381 8811 	msr	BASEPRI, r1
 800296a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d031      	beq.n	80029d6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8002972:	4925      	ldr	r1, [pc, #148]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	440b      	add	r3, r1
 8002980:	3360      	adds	r3, #96	; 0x60
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8002986:	4920      	ldr	r1, [pc, #128]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	440b      	add	r3, r1
 8002994:	3364      	adds	r3, #100	; 0x64
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800299a:	491b      	ldr	r1, [pc, #108]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	3368      	adds	r3, #104	; 0x68
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80029ae:	4916      	ldr	r1, [pc, #88]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	3370      	adds	r3, #112	; 0x70
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80029c2:	4911      	ldr	r1, [pc, #68]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	336c      	adds	r3, #108	; 0x6c
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80029d6:	490c      	ldr	r1, [pc, #48]	; (8002a08 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	440b      	add	r3, r1
 80029e4:	3374      	adds	r3, #116	; 0x74
 80029e6:	6a3a      	ldr	r2, [r7, #32]
 80029e8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	e002      	b.n	80029fc <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80029f6:	f04f 33ff 	mov.w	r3, #4294967295
 80029fa:	617b      	str	r3, [r7, #20]
  }
  return r;
 80029fc:	697b      	ldr	r3, [r7, #20]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	2001742c 	.word	0x2001742c

08002a0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002a1c:	e002      	b.n	8002a24 <_EncodeStr+0x18>
    Len++;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	3301      	adds	r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f6      	bne.n	8002a1e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d901      	bls.n	8002a3c <_EncodeStr+0x30>
    Len = Limit;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2bfe      	cmp	r3, #254	; 0xfe
 8002a40:	d806      	bhi.n	8002a50 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	60fa      	str	r2, [r7, #12]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e011      	b.n	8002a74 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	60fa      	str	r2, [r7, #12]
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	60fa      	str	r2, [r7, #12]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	b2d2      	uxtb	r2, r2
 8002a64:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	0a19      	lsrs	r1, r3, #8
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	60fa      	str	r2, [r7, #12]
 8002a70:	b2ca      	uxtb	r2, r1
 8002a72:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002a78:	e00a      	b.n	8002a90 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	1c53      	adds	r3, r2, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1c59      	adds	r1, r3, #1
 8002a84:	60f9      	str	r1, [r7, #12]
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	701a      	strb	r2, [r3, #0]
    n++;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d3f0      	bcc.n	8002a7a <_EncodeStr+0x6e>
  }
  return pPayload;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3304      	adds	r3, #4
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002ac4:	1cfb      	adds	r3, r7, #3
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	4619      	mov	r1, r3
 8002aca:	2001      	movs	r0, #1
 8002acc:	f7ff fdb8 	bl	8002640 <SEGGER_RTT_ReadNoLock>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dd44      	ble.n	8002b64 <_HandleIncomingPacket+0xa6>
    switch (Cmd) {
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d01a      	beq.n	8002b16 <_HandleIncomingPacket+0x58>
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	dc06      	bgt.n	8002af2 <_HandleIncomingPacket+0x34>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d010      	beq.n	8002b0a <_HandleIncomingPacket+0x4c>
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	dc11      	bgt.n	8002b10 <_HandleIncomingPacket+0x52>
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d009      	beq.n	8002b04 <_HandleIncomingPacket+0x46>
 8002af0:	e02d      	b.n	8002b4e <_HandleIncomingPacket+0x90>
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d015      	beq.n	8002b22 <_HandleIncomingPacket+0x64>
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	db10      	blt.n	8002b1c <_HandleIncomingPacket+0x5e>
 8002afa:	2b07      	cmp	r3, #7
 8002afc:	d014      	beq.n	8002b28 <_HandleIncomingPacket+0x6a>
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d015      	beq.n	8002b2e <_HandleIncomingPacket+0x70>
 8002b02:	e024      	b.n	8002b4e <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002b04:	f000 fa7e 	bl	8003004 <SEGGER_SYSVIEW_Start>
      break;
 8002b08:	e031      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8002b0a:	f000 fb37 	bl	800317c <SEGGER_SYSVIEW_Stop>
      break;
 8002b0e:	e02e      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002b10:	f000 fd12 	bl	8003538 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002b14:	e02b      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002b16:	f000 fcd7 	bl	80034c8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8002b1a:	e028      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8002b1c:	f000 fb54 	bl	80031c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002b20:	e025      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002b22:	f000 ffab 	bl	8003a7c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002b26:	e022      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8002b28:	f000 ff8a 	bl	8003a40 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8002b2c:	e01f      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002b2e:	1cfb      	adds	r3, r7, #3
 8002b30:	2201      	movs	r2, #1
 8002b32:	4619      	mov	r1, r3
 8002b34:	2001      	movs	r0, #1
 8002b36:	f7ff fd83 	bl	8002640 <SEGGER_RTT_ReadNoLock>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	dd11      	ble.n	8002b68 <_HandleIncomingPacket+0xaa>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fefa 	bl	8003940 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8002b4c:	e00c      	b.n	8002b68 <_HandleIncomingPacket+0xaa>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da0a      	bge.n	8002b6c <_HandleIncomingPacket+0xae>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002b56:	1cfb      	adds	r3, r7, #3
 8002b58:	2201      	movs	r2, #1
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f7ff fd6f 	bl	8002640 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8002b62:	e003      	b.n	8002b6c <_HandleIncomingPacket+0xae>
    }
  }
 8002b64:	bf00      	nop
 8002b66:	e002      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
      break;
 8002b68:	bf00      	nop
 8002b6a:	e000      	b.n	8002b6e <_HandleIncomingPacket+0xb0>
      break;
 8002b6c:	bf00      	nop
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	; 0x30
 8002b7c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8002b7e:	2301      	movs	r3, #1
 8002b80:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	3301      	adds	r3, #1
 8002b86:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b8c:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	e00b      	b.n	8002bac <_TrySendOverflowPacket+0x34>
 8002b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002b9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	09db      	lsrs	r3, r3, #7
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bae:	2b7f      	cmp	r3, #127	; 0x7f
 8002bb0:	d8f0      	bhi.n	8002b94 <_TrySendOverflowPacket+0x1c>
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <_TrySendOverflowPacket+0xdc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	623b      	str	r3, [r7, #32]
 8002bda:	e00b      	b.n	8002bf4 <_TrySendOverflowPacket+0x7c>
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	1c59      	adds	r1, r3, #1
 8002be4:	6279      	str	r1, [r7, #36]	; 0x24
 8002be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	09db      	lsrs	r3, r3, #7
 8002bf2:	623b      	str	r3, [r7, #32]
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8002bf8:	d8f0      	bhi.n	8002bdc <_TrySendOverflowPacket+0x64>
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8002c00:	6a3a      	ldr	r2, [r7, #32]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	461a      	mov	r2, r3
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7ff fd94 	bl	8002744 <SEGGER_RTT_WriteSkipNoLock>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002c26:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002c36:	701a      	strb	r2, [r3, #0]
 8002c38:	e004      	b.n	8002c44 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4a03      	ldr	r2, [pc, #12]	; (8002c50 <_TrySendOverflowPacket+0xd8>)
 8002c42:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8002c44:	693b      	ldr	r3, [r7, #16]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3730      	adds	r7, #48	; 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20017318 	.word	0x20017318
 8002c54:	e0001004 	.word	0xe0001004

08002c58 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8002c64:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <_SendPacket+0x19c>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d010      	beq.n	8002c8e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <_SendPacket+0x19c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a1 	beq.w	8002db8 <_SendPacket+0x160>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8002c76:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <_SendPacket+0x19c>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d109      	bne.n	8002c92 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8002c7e:	f7ff ff7b 	bl	8002b78 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8002c82:	4b5c      	ldr	r3, [pc, #368]	; (8002df4 <_SendPacket+0x19c>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	f040 8098 	bne.w	8002dbc <_SendPacket+0x164>
      goto SendDone;
    }
  }
Send:
 8002c8c:	e001      	b.n	8002c92 <_SendPacket+0x3a>
    goto Send;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <_SendPacket+0x3c>
Send:
 8002c92:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b1f      	cmp	r3, #31
 8002c98:	d809      	bhi.n	8002cae <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8002c9a:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <_SendPacket+0x19c>)
 8002c9c:	69da      	ldr	r2, [r3, #28]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f040 8089 	bne.w	8002dc0 <_SendPacket+0x168>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b17      	cmp	r3, #23
 8002cb2:	d807      	bhi.n	8002cc4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e03d      	b.n	8002d40 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	2b7f      	cmp	r3, #127	; 0x7f
 8002cd0:	d912      	bls.n	8002cf8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	09da      	lsrs	r2, r3, #7
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	3a01      	subs	r2, #1
 8002cea:	60fa      	str	r2, [r7, #12]
 8002cec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	701a      	strb	r2, [r3, #0]
 8002cf6:	e006      	b.n	8002d06 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b7f      	cmp	r3, #127	; 0x7f
 8002d0a:	d912      	bls.n	8002d32 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	09da      	lsrs	r2, r3, #7
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	3a01      	subs	r2, #1
 8002d24:	60fa      	str	r2, [r7, #12]
 8002d26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e006      	b.n	8002d40 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <_SendPacket+0x1a0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <_SendPacket+0x19c>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	623b      	str	r3, [r7, #32]
 8002d58:	e00b      	b.n	8002d72 <_SendPacket+0x11a>
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	1c59      	adds	r1, r3, #1
 8002d62:	6279      	str	r1, [r7, #36]	; 0x24
 8002d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	09db      	lsrs	r3, r3, #7
 8002d70:	623b      	str	r3, [r7, #32]
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	2b7f      	cmp	r3, #127	; 0x7f
 8002d76:	d8f0      	bhi.n	8002d5a <_SendPacket+0x102>
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68f9      	ldr	r1, [r7, #12]
 8002d92:	2001      	movs	r0, #1
 8002d94:	f7ff fcd6 	bl	8002744 <SEGGER_RTT_WriteSkipNoLock>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <_SendPacket+0x152>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8002da2:	4a14      	ldr	r2, [pc, #80]	; (8002df4 <_SendPacket+0x19c>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	60d3      	str	r3, [r2, #12]
 8002da8:	e00b      	b.n	8002dc2 <_SendPacket+0x16a>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <_SendPacket+0x19c>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <_SendPacket+0x19c>)
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e004      	b.n	8002dc2 <_SendPacket+0x16a>
    goto SendDone;
 8002db8:	bf00      	nop
 8002dba:	e002      	b.n	8002dc2 <_SendPacket+0x16a>
      goto SendDone;
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <_SendPacket+0x16a>
      goto SendDone;
 8002dc0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <_SendPacket+0x1a4>)
 8002dc4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <_SendPacket+0x1a4>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d00b      	beq.n	8002dea <_SendPacket+0x192>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <_SendPacket+0x19c>)
 8002dd4:	789b      	ldrb	r3, [r3, #2]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <_SendPacket+0x192>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002dda:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <_SendPacket+0x19c>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8002de0:	f7ff fe6d 	bl	8002abe <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <_SendPacket+0x19c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20017318 	.word	0x20017318
 8002df8:	e0001004 	.word	0xe0001004
 8002dfc:	2001742c 	.word	0x2001742c

08002e00 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e16:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <SEGGER_SYSVIEW_Init+0x68>)
 8002e18:	4914      	ldr	r1, [pc, #80]	; (8002e6c <SEGGER_SYSVIEW_Init+0x6c>)
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7ff fd22 	bl	8002864 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8002e20:	2300      	movs	r3, #0
 8002e22:	9300      	str	r3, [sp, #0]
 8002e24:	2308      	movs	r3, #8
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <SEGGER_SYSVIEW_Init+0x70>)
 8002e28:	4910      	ldr	r1, [pc, #64]	; (8002e6c <SEGGER_SYSVIEW_Init+0x6c>)
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7ff fd84 	bl	8002938 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8002e30:	4b10      	ldr	r3, [pc, #64]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e36:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <SEGGER_SYSVIEW_Init+0x78>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e3e:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8002e40:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8002e46:	4a0b      	ldr	r2, [pc, #44]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8002e4c:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8002e52:	4a08      	ldr	r2, [pc, #32]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8002e58:	4b06      	ldr	r3, [pc, #24]	; (8002e74 <SEGGER_SYSVIEW_Init+0x74>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20013310 	.word	0x20013310
 8002e6c:	08003da0 	.word	0x08003da0
 8002e70:	20017310 	.word	0x20017310
 8002e74:	20017318 	.word	0x20017318
 8002e78:	e0001004 	.word	0xe0001004

08002e7c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6113      	str	r3, [r2, #16]
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	20017318 	.word	0x20017318

08002e9c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8002ea8:	f04f 0120 	mov.w	r1, #32
 8002eac:	f381 8811 	msr	BASEPRI, r1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8002eb4:	f7ff fdf7 	bl	8002aa6 <_PreparePacket>
 8002eb8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68b8      	ldr	r0, [r7, #8]
 8002ec0:	f7ff feca 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f383 8811 	msr	BASEPRI, r3
}
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20017348 	.word	0x20017348

08002ed8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ee6:	f04f 0120 	mov.w	r1, #32
 8002eea:	f381 8811 	msr	BASEPRI, r1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	4816      	ldr	r0, [pc, #88]	; (8002f4c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8002ef2:	f7ff fdd8 	bl	8002aa6 <_PreparePacket>
 8002ef6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e00b      	b.n	8002f1e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	1c59      	adds	r1, r3, #1
 8002f0e:	61f9      	str	r1, [r7, #28]
 8002f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	09db      	lsrs	r3, r3, #7
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b7f      	cmp	r3, #127	; 0x7f
 8002f22:	d8f0      	bhi.n	8002f06 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	61fa      	str	r2, [r7, #28]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	68f9      	ldr	r1, [r7, #12]
 8002f38:	6938      	ldr	r0, [r7, #16]
 8002f3a:	f7ff fe8d 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f383 8811 	msr	BASEPRI, r3
}
 8002f44:	bf00      	nop
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	20017348 	.word	0x20017348

08002f50 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	; 0x30
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8002f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8002f60:	f04f 0120 	mov.w	r1, #32
 8002f64:	f381 8811 	msr	BASEPRI, r1
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	4825      	ldr	r0, [pc, #148]	; (8003000 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8002f6c:	f7ff fd9b 	bl	8002aa6 <_PreparePacket>
 8002f70:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7e:	e00b      	b.n	8002f98 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	1c59      	adds	r1, r3, #1
 8002f88:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002f8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	09db      	lsrs	r3, r3, #7
 8002f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f9c:	d8f0      	bhi.n	8002f80 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	623b      	str	r3, [r7, #32]
 8002fb6:	e00b      	b.n	8002fd0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	1c59      	adds	r1, r3, #1
 8002fc0:	6279      	str	r1, [r7, #36]	; 0x24
 8002fc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	09db      	lsrs	r3, r3, #7
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd4:	d8f0      	bhi.n	8002fb8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	627a      	str	r2, [r7, #36]	; 0x24
 8002fdc:	6a3a      	ldr	r2, [r7, #32]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6979      	ldr	r1, [r7, #20]
 8002fea:	69b8      	ldr	r0, [r7, #24]
 8002fec:	f7ff fe34 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f383 8811 	msr	BASEPRI, r3
}
 8002ff6:	bf00      	nop
 8002ff8:	3730      	adds	r7, #48	; 0x30
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20017348 	.word	0x20017348

08003004 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 800300a:	4b59      	ldr	r3, [pc, #356]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	f040 80aa 	bne.w	8003168 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003014:	4b56      	ldr	r3, [pc, #344]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 8003016:	2201      	movs	r2, #1
 8003018:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800301a:	f3ef 8311 	mrs	r3, BASEPRI
 800301e:	f04f 0120 	mov.w	r1, #32
 8003022:	f381 8811 	msr	BASEPRI, r1
 8003026:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003028:	220a      	movs	r2, #10
 800302a:	4952      	ldr	r1, [pc, #328]	; (8003174 <SEGGER_SYSVIEW_Start+0x170>)
 800302c:	2001      	movs	r0, #1
 800302e:	f7ff fb89 	bl	8002744 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003038:	200a      	movs	r0, #10
 800303a:	f7ff ff2f 	bl	8002e9c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800303e:	f3ef 8311 	mrs	r3, BASEPRI
 8003042:	f04f 0120 	mov.w	r1, #32
 8003046:	f381 8811 	msr	BASEPRI, r1
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	484a      	ldr	r0, [pc, #296]	; (8003178 <SEGGER_SYSVIEW_Start+0x174>)
 800304e:	f7ff fd2a 	bl	8002aa6 <_PreparePacket>
 8003052:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800305c:	4b44      	ldr	r3, [pc, #272]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
 8003062:	e00b      	b.n	800307c <SEGGER_SYSVIEW_Start+0x78>
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	b2da      	uxtb	r2, r3
 8003068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800306e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]
 8003076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003078:	09db      	lsrs	r3, r3, #7
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2b7f      	cmp	r3, #127	; 0x7f
 8003080:	d8f0      	bhi.n	8003064 <SEGGER_SYSVIEW_Start+0x60>
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	1c5a      	adds	r2, r3, #1
 8003086:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003088:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003090:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	4b36      	ldr	r3, [pc, #216]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	623b      	str	r3, [r7, #32]
 800309c:	e00b      	b.n	80030b6 <SEGGER_SYSVIEW_Start+0xb2>
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1c59      	adds	r1, r3, #1
 80030a6:	6279      	str	r1, [r7, #36]	; 0x24
 80030a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	09db      	lsrs	r3, r3, #7
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2b7f      	cmp	r3, #127	; 0x7f
 80030ba:	d8f0      	bhi.n	800309e <SEGGER_SYSVIEW_Start+0x9a>
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	627a      	str	r2, [r7, #36]	; 0x24
 80030c2:	6a3a      	ldr	r2, [r7, #32]
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	61fb      	str	r3, [r7, #28]
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e00b      	b.n	80030f0 <SEGGER_SYSVIEW_Start+0xec>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	61f9      	str	r1, [r7, #28]
 80030e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	09db      	lsrs	r3, r3, #7
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b7f      	cmp	r3, #127	; 0x7f
 80030f4:	d8f0      	bhi.n	80030d8 <SEGGER_SYSVIEW_Start+0xd4>
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	61fa      	str	r2, [r7, #28]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	2302      	movs	r3, #2
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e00b      	b.n	8003128 <SEGGER_SYSVIEW_Start+0x124>
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	b2da      	uxtb	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	6179      	str	r1, [r7, #20]
 800311a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	09db      	lsrs	r3, r3, #7
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	2b7f      	cmp	r3, #127	; 0x7f
 800312c:	d8f0      	bhi.n	8003110 <SEGGER_SYSVIEW_Start+0x10c>
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	617a      	str	r2, [r7, #20]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800313e:	2218      	movs	r2, #24
 8003140:	6839      	ldr	r1, [r7, #0]
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fd88 	bl	8002c58 <_SendPacket>
      RECORD_END();
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <SEGGER_SYSVIEW_Start+0x16c>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800315c:	f000 f9ec 	bl	8003538 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003160:	f000 f9b2 	bl	80034c8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003164:	f000 fc8a 	bl	8003a7c <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8003168:	bf00      	nop
 800316a:	3730      	adds	r7, #48	; 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20017318 	.word	0x20017318
 8003174:	08003dc0 	.word	0x08003dc0
 8003178:	20017348 	.word	0x20017348

0800317c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003182:	f3ef 8311 	mrs	r3, BASEPRI
 8003186:	f04f 0120 	mov.w	r1, #32
 800318a:	f381 8811 	msr	BASEPRI, r1
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	480b      	ldr	r0, [pc, #44]	; (80031c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8003192:	f7ff fc88 	bl	8002aa6 <_PreparePacket>
 8003196:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80031a0:	220b      	movs	r2, #11
 80031a2:	6839      	ldr	r1, [r7, #0]
 80031a4:	6838      	ldr	r0, [r7, #0]
 80031a6:	f7ff fd57 	bl	8002c58 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f383 8811 	msr	BASEPRI, r3
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	20017348 	.word	0x20017348
 80031c4:	20017318 	.word	0x20017318

080031c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80031ce:	f3ef 8311 	mrs	r3, BASEPRI
 80031d2:	f04f 0120 	mov.w	r1, #32
 80031d6:	f381 8811 	msr	BASEPRI, r1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	4845      	ldr	r0, [pc, #276]	; (80032f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80031de:	f7ff fc62 	bl	8002aa6 <_PreparePacket>
 80031e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ec:	4b42      	ldr	r3, [pc, #264]	; (80032f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f2:	e00b      	b.n	800320c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	1c59      	adds	r1, r3, #1
 80031fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80031fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	09db      	lsrs	r3, r3, #7
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2b7f      	cmp	r3, #127	; 0x7f
 8003210:	d8f0      	bhi.n	80031f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	e00b      	b.n	8003246 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	1c59      	adds	r1, r3, #1
 8003236:	6279      	str	r1, [r7, #36]	; 0x24
 8003238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	09db      	lsrs	r3, r3, #7
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b7f      	cmp	r3, #127	; 0x7f
 800324a:	d8f0      	bhi.n	800322e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	1c5a      	adds	r2, r3, #1
 8003250:	627a      	str	r2, [r7, #36]	; 0x24
 8003252:	6a3a      	ldr	r2, [r7, #32]
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e00b      	b.n	8003280 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	b2da      	uxtb	r2, r3
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	61f9      	str	r1, [r7, #28]
 8003272:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	09db      	lsrs	r3, r3, #7
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b7f      	cmp	r3, #127	; 0x7f
 8003284:	d8f0      	bhi.n	8003268 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	61fa      	str	r2, [r7, #28]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	2302      	movs	r3, #2
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e00b      	b.n	80032b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	1c59      	adds	r1, r3, #1
 80032a8:	6179      	str	r1, [r7, #20]
 80032aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	09db      	lsrs	r3, r3, #7
 80032b6:	613b      	str	r3, [r7, #16]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	2b7f      	cmp	r3, #127	; 0x7f
 80032bc:	d8f0      	bhi.n	80032a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	617a      	str	r2, [r7, #20]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80032ce:	2218      	movs	r2, #24
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68b8      	ldr	r0, [r7, #8]
 80032d4:	f7ff fcc0 	bl	8002c58 <_SendPacket>
  RECORD_END();
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80032e6:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	4798      	blx	r3
  }
}
 80032ec:	bf00      	nop
 80032ee:	3730      	adds	r7, #48	; 0x30
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20017348 	.word	0x20017348
 80032f8:	20017318 	.word	0x20017318

080032fc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b092      	sub	sp, #72	; 0x48
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003304:	f3ef 8311 	mrs	r3, BASEPRI
 8003308:	f04f 0120 	mov.w	r1, #32
 800330c:	f381 8811 	msr	BASEPRI, r1
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	486b      	ldr	r0, [pc, #428]	; (80034c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003314:	f7ff fbc7 	bl	8002aa6 <_PreparePacket>
 8003318:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
 8003330:	e00b      	b.n	800334a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 8003332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003334:	b2da      	uxtb	r2, r3
 8003336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003338:	1c59      	adds	r1, r3, #1
 800333a:	6479      	str	r1, [r7, #68]	; 0x44
 800333c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003346:	09db      	lsrs	r3, r3, #7
 8003348:	643b      	str	r3, [r7, #64]	; 0x40
 800334a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800334c:	2b7f      	cmp	r3, #127	; 0x7f
 800334e:	d8f0      	bhi.n	8003332 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8003350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	647a      	str	r2, [r7, #68]	; 0x44
 8003356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
 800336a:	e00b      	b.n	8003384 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	b2da      	uxtb	r2, r3
 8003370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003372:	1c59      	adds	r1, r3, #1
 8003374:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	09db      	lsrs	r3, r3, #7
 8003382:	63bb      	str	r3, [r7, #56]	; 0x38
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	2b7f      	cmp	r3, #127	; 0x7f
 8003388:	d8f0      	bhi.n	800336c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800338a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003390:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003398:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	4619      	mov	r1, r3
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff fb32 	bl	8002a0c <_EncodeStr>
 80033a8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80033aa:	2209      	movs	r2, #9
 80033ac:	68f9      	ldr	r1, [r7, #12]
 80033ae:	6938      	ldr	r0, [r7, #16]
 80033b0:	f7ff fc52 	bl	8002c58 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4b40      	ldr	r3, [pc, #256]	; (80034c4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	089b      	lsrs	r3, r3, #2
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ca:	e00b      	b.n	80033e4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d2:	1c59      	adds	r1, r3, #1
 80033d4:	6379      	str	r1, [r7, #52]	; 0x34
 80033d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	09db      	lsrs	r3, r3, #7
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	2b7f      	cmp	r3, #127	; 0x7f
 80033e8:	d8f0      	bhi.n	80033cc <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80033ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	637a      	str	r2, [r7, #52]	; 0x34
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
 8003404:	e00b      	b.n	800341e <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	b2da      	uxtb	r2, r3
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	1c59      	adds	r1, r3, #1
 800340e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003410:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	09db      	lsrs	r3, r3, #7
 800341c:	62bb      	str	r3, [r7, #40]	; 0x28
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	2b7f      	cmp	r3, #127	; 0x7f
 8003422:	d8f0      	bhi.n	8003406 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800342a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	627b      	str	r3, [r7, #36]	; 0x24
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	623b      	str	r3, [r7, #32]
 800343e:	e00b      	b.n	8003458 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	b2da      	uxtb	r2, r3
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	6279      	str	r1, [r7, #36]	; 0x24
 800344a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	09db      	lsrs	r3, r3, #7
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	2b7f      	cmp	r3, #127	; 0x7f
 800345c:	d8f0      	bhi.n	8003440 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	627a      	str	r2, [r7, #36]	; 0x24
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	e00b      	b.n	8003490 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	1c59      	adds	r1, r3, #1
 8003480:	61f9      	str	r1, [r7, #28]
 8003482:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	09db      	lsrs	r3, r3, #7
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b7f      	cmp	r3, #127	; 0x7f
 8003494:	d8f0      	bhi.n	8003478 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	61fa      	str	r2, [r7, #28]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80034a6:	2215      	movs	r2, #21
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	6938      	ldr	r0, [r7, #16]
 80034ac:	f7ff fbd4 	bl	8002c58 <_SendPacket>
  RECORD_END();
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f383 8811 	msr	BASEPRI, r3
}
 80034b6:	bf00      	nop
 80034b8:	3748      	adds	r7, #72	; 0x48
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	20017348 	.word	0x20017348
 80034c4:	20017318 	.word	0x20017318

080034c8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80034de:	4b03      	ldr	r3, [pc, #12]	; (80034ec <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4798      	blx	r3
  }
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20017318 	.word	0x20017318

080034f0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80034f8:	f3ef 8311 	mrs	r3, BASEPRI
 80034fc:	f04f 0120 	mov.w	r1, #32
 8003500:	f381 8811 	msr	BASEPRI, r1
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	480b      	ldr	r0, [pc, #44]	; (8003534 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003508:	f7ff facd 	bl	8002aa6 <_PreparePacket>
 800350c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6938      	ldr	r0, [r7, #16]
 8003514:	f7ff fa7a 	bl	8002a0c <_EncodeStr>
 8003518:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800351a:	220e      	movs	r2, #14
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	6938      	ldr	r0, [r7, #16]
 8003520:	f7ff fb9a 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f383 8811 	msr	BASEPRI, r3
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	20017348 	.word	0x20017348

08003538 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d014      	beq.n	800357a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003550:	4b0f      	ldr	r3, [pc, #60]	; (8003590 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4798      	blx	r3
 8003558:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800355c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800355e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f04f 0400 	mov.w	r4, #0
 800356a:	0013      	movs	r3, r2
 800356c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800356e:	461a      	mov	r2, r3
 8003570:	4601      	mov	r1, r0
 8003572:	200d      	movs	r0, #13
 8003574:	f7ff fcec 	bl	8002f50 <SEGGER_SYSVIEW_RecordU32x2>
 8003578:	e005      	b.n	8003586 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800357a:	4b06      	ldr	r3, [pc, #24]	; (8003594 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4619      	mov	r1, r3
 8003580:	200c      	movs	r0, #12
 8003582:	f7ff fca9 	bl	8002ed8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}
 800358e:	bf00      	nop
 8003590:	20017318 	.word	0x20017318
 8003594:	e0001004 	.word	0xe0001004

08003598 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800359e:	f3ef 8311 	mrs	r3, BASEPRI
 80035a2:	f04f 0120 	mov.w	r1, #32
 80035a6:	f381 8811 	msr	BASEPRI, r1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	4819      	ldr	r0, [pc, #100]	; (8003614 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80035ae:	f7ff fa7a 	bl	8002aa6 <_PreparePacket>
 80035b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80035b8:	4b17      	ldr	r3, [pc, #92]	; (8003618 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035c0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	617b      	str	r3, [r7, #20]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e00b      	b.n	80035e4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	6179      	str	r1, [r7, #20]
 80035d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	09db      	lsrs	r3, r3, #7
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	2b7f      	cmp	r3, #127	; 0x7f
 80035e8:	d8f0      	bhi.n	80035cc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	617a      	str	r2, [r7, #20]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80035fa:	2202      	movs	r2, #2
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	68b8      	ldr	r0, [r7, #8]
 8003600:	f7ff fb2a 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f383 8811 	msr	BASEPRI, r3
}
 800360a:	bf00      	nop
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20017348 	.word	0x20017348
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003622:	f3ef 8311 	mrs	r3, BASEPRI
 8003626:	f04f 0120 	mov.w	r1, #32
 800362a:	f381 8811 	msr	BASEPRI, r1
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	4807      	ldr	r0, [pc, #28]	; (8003650 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003632:	f7ff fa38 	bl	8002aa6 <_PreparePacket>
 8003636:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003638:	2203      	movs	r2, #3
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	f7ff fb0b 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f383 8811 	msr	BASEPRI, r3
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20017348 	.word	0x20017348

08003654 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800365a:	f3ef 8311 	mrs	r3, BASEPRI
 800365e:	f04f 0120 	mov.w	r1, #32
 8003662:	f381 8811 	msr	BASEPRI, r1
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	4807      	ldr	r0, [pc, #28]	; (8003688 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800366a:	f7ff fa1c 	bl	8002aa6 <_PreparePacket>
 800366e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003670:	2212      	movs	r2, #18
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f7ff faef 	bl	8002c58 <_SendPacket>
  RECORD_END();
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f383 8811 	msr	BASEPRI, r3
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20017348 	.word	0x20017348

0800368c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003692:	f3ef 8311 	mrs	r3, BASEPRI
 8003696:	f04f 0120 	mov.w	r1, #32
 800369a:	f381 8811 	msr	BASEPRI, r1
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	4807      	ldr	r0, [pc, #28]	; (80036c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80036a2:	f7ff fa00 	bl	8002aa6 <_PreparePacket>
 80036a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80036a8:	2211      	movs	r2, #17
 80036aa:	6839      	ldr	r1, [r7, #0]
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	f7ff fad3 	bl	8002c58 <_SendPacket>
  RECORD_END();
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f383 8811 	msr	BASEPRI, r3
}
 80036b8:	bf00      	nop
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20017348 	.word	0x20017348

080036c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b088      	sub	sp, #32
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80036cc:	f3ef 8311 	mrs	r3, BASEPRI
 80036d0:	f04f 0120 	mov.w	r1, #32
 80036d4:	f381 8811 	msr	BASEPRI, r1
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	481a      	ldr	r0, [pc, #104]	; (8003744 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80036dc:	f7ff f9e3 	bl	8002aa6 <_PreparePacket>
 80036e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e00b      	b.n	8003714 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	1c59      	adds	r1, r3, #1
 8003704:	61f9      	str	r1, [r7, #28]
 8003706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	09db      	lsrs	r3, r3, #7
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b7f      	cmp	r3, #127	; 0x7f
 8003718:	d8f0      	bhi.n	80036fc <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	61fa      	str	r2, [r7, #28]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800372a:	2208      	movs	r2, #8
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	6938      	ldr	r0, [r7, #16]
 8003730:	f7ff fa92 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f383 8811 	msr	BASEPRI, r3
}
 800373a:	bf00      	nop
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20017348 	.word	0x20017348
 8003748:	20017318 	.word	0x20017318

0800374c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003754:	f3ef 8311 	mrs	r3, BASEPRI
 8003758:	f04f 0120 	mov.w	r1, #32
 800375c:	f381 8811 	msr	BASEPRI, r1
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	481a      	ldr	r0, [pc, #104]	; (80037cc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8003764:	f7ff f99f 	bl	8002aa6 <_PreparePacket>
 8003768:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	089b      	lsrs	r3, r3, #2
 8003778:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	61fb      	str	r3, [r7, #28]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e00b      	b.n	800379c <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	61f9      	str	r1, [r7, #28]
 800378e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	09db      	lsrs	r3, r3, #7
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2b7f      	cmp	r3, #127	; 0x7f
 80037a0:	d8f0      	bhi.n	8003784 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	1c5a      	adds	r2, r3, #1
 80037a6:	61fa      	str	r2, [r7, #28]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80037b2:	2204      	movs	r2, #4
 80037b4:	68f9      	ldr	r1, [r7, #12]
 80037b6:	6938      	ldr	r0, [r7, #16]
 80037b8:	f7ff fa4e 	bl	8002c58 <_SendPacket>
  RECORD_END();
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f383 8811 	msr	BASEPRI, r3
}
 80037c2:	bf00      	nop
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20017348 	.word	0x20017348
 80037d0:	20017318 	.word	0x20017318

080037d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80037dc:	f3ef 8311 	mrs	r3, BASEPRI
 80037e0:	f04f 0120 	mov.w	r1, #32
 80037e4:	f381 8811 	msr	BASEPRI, r1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	481a      	ldr	r0, [pc, #104]	; (8003854 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80037ec:	f7ff f95b 	bl	8002aa6 <_PreparePacket>
 80037f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80037f6:	4b18      	ldr	r3, [pc, #96]	; (8003858 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	089b      	lsrs	r3, r3, #2
 8003800:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	e00b      	b.n	8003824 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	61f9      	str	r1, [r7, #28]
 8003816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	09db      	lsrs	r3, r3, #7
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b7f      	cmp	r3, #127	; 0x7f
 8003828:	d8f0      	bhi.n	800380c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	61fa      	str	r2, [r7, #28]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800383a:	2206      	movs	r2, #6
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	6938      	ldr	r0, [r7, #16]
 8003840:	f7ff fa0a 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f383 8811 	msr	BASEPRI, r3
}
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20017348 	.word	0x20017348
 8003858:	20017318 	.word	0x20017318

0800385c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003866:	f3ef 8311 	mrs	r3, BASEPRI
 800386a:	f04f 0120 	mov.w	r1, #32
 800386e:	f381 8811 	msr	BASEPRI, r1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	4827      	ldr	r0, [pc, #156]	; (8003914 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8003876:	f7ff f916 	bl	8002aa6 <_PreparePacket>
 800387a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8003880:	4b25      	ldr	r3, [pc, #148]	; (8003918 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	627b      	str	r3, [r7, #36]	; 0x24
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	e00b      	b.n	80038ae <SEGGER_SYSVIEW_OnTaskStopReady+0x52>
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	1c59      	adds	r1, r3, #1
 800389e:	6279      	str	r1, [r7, #36]	; 0x24
 80038a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	09db      	lsrs	r3, r3, #7
 80038ac:	623b      	str	r3, [r7, #32]
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	2b7f      	cmp	r3, #127	; 0x7f
 80038b2:	d8f0      	bhi.n	8003896 <SEGGER_SYSVIEW_OnTaskStopReady+0x3a>
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	627a      	str	r2, [r7, #36]	; 0x24
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e00b      	b.n	80038e6 <SEGGER_SYSVIEW_OnTaskStopReady+0x8a>
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	1c59      	adds	r1, r3, #1
 80038d6:	61f9      	str	r1, [r7, #28]
 80038d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	09db      	lsrs	r3, r3, #7
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b7f      	cmp	r3, #127	; 0x7f
 80038ea:	d8f0      	bhi.n	80038ce <SEGGER_SYSVIEW_OnTaskStopReady+0x72>
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	61fa      	str	r2, [r7, #28]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80038fc:	2207      	movs	r2, #7
 80038fe:	68f9      	ldr	r1, [r7, #12]
 8003900:	6938      	ldr	r0, [r7, #16]
 8003902:	f7ff f9a9 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f383 8811 	msr	BASEPRI, r3
}
 800390c:	bf00      	nop
 800390e:	3728      	adds	r7, #40	; 0x28
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20017348 	.word	0x20017348
 8003918:	20017318 	.word	0x20017318

0800391c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	089b      	lsrs	r3, r3, #2
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20017318 	.word	0x20017318

08003940 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d06d      	beq.n	8003a2e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8003952:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8003958:	2300      	movs	r3, #0
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
 800395c:	e008      	b.n	8003970 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d007      	beq.n	800397a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	3301      	adds	r3, #1
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003974:	429a      	cmp	r2, r3
 8003976:	d3f2      	bcc.n	800395e <SEGGER_SYSVIEW_SendModule+0x1e>
 8003978:	e000      	b.n	800397c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800397a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d055      	beq.n	8003a2e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003982:	f3ef 8311 	mrs	r3, BASEPRI
 8003986:	f04f 0120 	mov.w	r1, #32
 800398a:	f381 8811 	msr	BASEPRI, r1
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	482a      	ldr	r0, [pc, #168]	; (8003a3c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8003992:	f7ff f888 	bl	8002aa6 <_PreparePacket>
 8003996:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	623b      	str	r3, [r7, #32]
 80039a4:	e00b      	b.n	80039be <SEGGER_SYSVIEW_SendModule+0x7e>
 80039a6:	6a3b      	ldr	r3, [r7, #32]
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	6279      	str	r1, [r7, #36]	; 0x24
 80039b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	09db      	lsrs	r3, r3, #7
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	2b7f      	cmp	r3, #127	; 0x7f
 80039c2:	d8f0      	bhi.n	80039a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	627a      	str	r2, [r7, #36]	; 0x24
 80039ca:	6a3a      	ldr	r2, [r7, #32]
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e00b      	b.n	80039f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	1c59      	adds	r1, r3, #1
 80039e8:	61f9      	str	r1, [r7, #28]
 80039ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	09db      	lsrs	r3, r3, #7
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b7f      	cmp	r3, #127	; 0x7f
 80039fc:	d8f0      	bhi.n	80039e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	61fa      	str	r2, [r7, #28]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	4619      	mov	r1, r3
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7fe fff8 	bl	8002a0c <_EncodeStr>
 8003a1c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8003a1e:	2216      	movs	r2, #22
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	6938      	ldr	r0, [r7, #16]
 8003a24:	f7ff f918 	bl	8002c58 <_SendPacket>
      RECORD_END();
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8003a2e:	bf00      	nop
 8003a30:	3730      	adds	r7, #48	; 0x30
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20017340 	.word	0x20017340
 8003a3c:	20017348 	.word	0x20017348

08003a40 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00f      	beq.n	8003a6e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f2      	bne.n	8003a54 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20017340 	.word	0x20017340

08003a7c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8003a82:	f3ef 8311 	mrs	r3, BASEPRI
 8003a86:	f04f 0120 	mov.w	r1, #32
 8003a8a:	f381 8811 	msr	BASEPRI, r1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	4817      	ldr	r0, [pc, #92]	; (8003af0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8003a92:	f7ff f808 	bl	8002aa6 <_PreparePacket>
 8003a96:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	e00b      	b.n	8003ac0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	1c59      	adds	r1, r3, #1
 8003ab0:	6179      	str	r1, [r7, #20]
 8003ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	09db      	lsrs	r3, r3, #7
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ac4:	d8f0      	bhi.n	8003aa8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	617a      	str	r2, [r7, #20]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8003ad6:	221b      	movs	r2, #27
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	68b8      	ldr	r0, [r7, #8]
 8003adc:	f7ff f8bc 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f383 8811 	msr	BASEPRI, r3
}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20017348 	.word	0x20017348
 8003af4:	20017344 	.word	0x20017344

08003af8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	; 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b00:	f3ef 8311 	mrs	r3, BASEPRI
 8003b04:	f04f 0120 	mov.w	r1, #32
 8003b08:	f381 8811 	msr	BASEPRI, r1
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	4827      	ldr	r0, [pc, #156]	; (8003bac <SEGGER_SYSVIEW_Warn+0xb4>)
 8003b10:	f7fe ffc9 	bl	8002aa6 <_PreparePacket>
 8003b14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	6938      	ldr	r0, [r7, #16]
 8003b1c:	f7fe ff76 	bl	8002a0c <_EncodeStr>
 8003b20:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	2301      	movs	r3, #1
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	e00b      	b.n	8003b44 <SEGGER_SYSVIEW_Warn+0x4c>
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	6279      	str	r1, [r7, #36]	; 0x24
 8003b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	09db      	lsrs	r3, r3, #7
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2b7f      	cmp	r3, #127	; 0x7f
 8003b48:	d8f0      	bhi.n	8003b2c <SEGGER_SYSVIEW_Warn+0x34>
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	e00b      	b.n	8003b7c <SEGGER_SYSVIEW_Warn+0x84>
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	61f9      	str	r1, [r7, #28]
 8003b6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	09db      	lsrs	r3, r3, #7
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b80:	d8f0      	bhi.n	8003b64 <SEGGER_SYSVIEW_Warn+0x6c>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	61fa      	str	r2, [r7, #28]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003b92:	221a      	movs	r2, #26
 8003b94:	68f9      	ldr	r1, [r7, #12]
 8003b96:	6938      	ldr	r0, [r7, #16]
 8003b98:	f7ff f85e 	bl	8002c58 <_SendPacket>
  RECORD_END();
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f383 8811 	msr	BASEPRI, r3
}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20017348 	.word	0x20017348

08003bb0 <__libc_init_array>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	4e0d      	ldr	r6, [pc, #52]	; (8003be8 <__libc_init_array+0x38>)
 8003bb4:	4c0d      	ldr	r4, [pc, #52]	; (8003bec <__libc_init_array+0x3c>)
 8003bb6:	1ba4      	subs	r4, r4, r6
 8003bb8:	10a4      	asrs	r4, r4, #2
 8003bba:	2500      	movs	r5, #0
 8003bbc:	42a5      	cmp	r5, r4
 8003bbe:	d109      	bne.n	8003bd4 <__libc_init_array+0x24>
 8003bc0:	4e0b      	ldr	r6, [pc, #44]	; (8003bf0 <__libc_init_array+0x40>)
 8003bc2:	4c0c      	ldr	r4, [pc, #48]	; (8003bf4 <__libc_init_array+0x44>)
 8003bc4:	f000 f83a 	bl	8003c3c <_init>
 8003bc8:	1ba4      	subs	r4, r4, r6
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	2500      	movs	r5, #0
 8003bce:	42a5      	cmp	r5, r4
 8003bd0:	d105      	bne.n	8003bde <__libc_init_array+0x2e>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bd8:	4798      	blx	r3
 8003bda:	3501      	adds	r5, #1
 8003bdc:	e7ee      	b.n	8003bbc <__libc_init_array+0xc>
 8003bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be2:	4798      	blx	r3
 8003be4:	3501      	adds	r5, #1
 8003be6:	e7f2      	b.n	8003bce <__libc_init_array+0x1e>
 8003be8:	08003dcc 	.word	0x08003dcc
 8003bec:	08003dcc 	.word	0x08003dcc
 8003bf0:	08003dcc 	.word	0x08003dcc
 8003bf4:	08003dd0 	.word	0x08003dd0

08003bf8 <memcmp>:
 8003bf8:	b530      	push	{r4, r5, lr}
 8003bfa:	2400      	movs	r4, #0
 8003bfc:	42a2      	cmp	r2, r4
 8003bfe:	d101      	bne.n	8003c04 <memcmp+0xc>
 8003c00:	2000      	movs	r0, #0
 8003c02:	e007      	b.n	8003c14 <memcmp+0x1c>
 8003c04:	5d03      	ldrb	r3, [r0, r4]
 8003c06:	3401      	adds	r4, #1
 8003c08:	190d      	adds	r5, r1, r4
 8003c0a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8003c0e:	42ab      	cmp	r3, r5
 8003c10:	d0f4      	beq.n	8003bfc <memcmp+0x4>
 8003c12:	1b58      	subs	r0, r3, r5
 8003c14:	bd30      	pop	{r4, r5, pc}

08003c16 <memcpy>:
 8003c16:	b510      	push	{r4, lr}
 8003c18:	1e43      	subs	r3, r0, #1
 8003c1a:	440a      	add	r2, r1
 8003c1c:	4291      	cmp	r1, r2
 8003c1e:	d100      	bne.n	8003c22 <memcpy+0xc>
 8003c20:	bd10      	pop	{r4, pc}
 8003c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c2a:	e7f7      	b.n	8003c1c <memcpy+0x6>

08003c2c <memset>:
 8003c2c:	4402      	add	r2, r0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d100      	bne.n	8003c36 <memset+0xa>
 8003c34:	4770      	bx	lr
 8003c36:	f803 1b01 	strb.w	r1, [r3], #1
 8003c3a:	e7f9      	b.n	8003c30 <memset+0x4>

08003c3c <_init>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr

08003c48 <_fini>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr
